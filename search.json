[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": " Academic Writing with LaTeX",
    "section": "",
    "text": "Welcome!\nHave you ever looked at an academic journal article and marveled at how well it is set out? How clean the formatting looks, how professionally tables and figures are presented? Or are you looking for a programme that makes the creation of a bibliography a breeze? Then look no further than LaTeX!\nIf you have any queries, please feel free to get in touch.\n\n \n\n\n\nAccessibility\nThe companion uses the font “Lexend”. Lexend fonts are intended to reduce visual stress and so improve reading performance. Initially they were designed with dyslexia and struggling readers in mind, but Bonnie Shaver-Troup, creator of the Lexend project, soon found out that these fonts are also great for everyone else.\nCode is displayed in Recursive Mono. The font’s characters share the same width for clear legibility and perfect alignment. This is particularly helpful for use in programming and data-heavy design tasks, but also allows for creative possibilities in display typography.\nEquations and mathematical expressions are set in Fira Math. Fira Math is easy to read with open shapes, clear spacing, and good contrast. This keeps subscripts, superscripts, and fractions legible - even at small sizes. It stays readable on screens and in print, reducing mix-ups between look-alike characters like 1, I, and l.\nThe companion also uses a dark mode theme. For many users, including some neurodivergent individuals, dark mode can reduce eye strain and enhance focus by minimising visual overstimulation.\nWhilst I recognise that mobile phones play an essential part in all our daily lives, please note that this companion is optimised for display on tablets, laptops, and desktop computers.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "01-LaTeX_1.html",
    "href": "01-LaTeX_1.html",
    "title": "The First LaTeX Document",
    "section": "",
    "text": "Introduction\nIn this section, we will cover the basics you need to know to create your first LaTeX document. This section will cover:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The First LaTeX Document</span>"
    ]
  },
  {
    "objectID": "01-LaTeX_1.html#why-should-i-choose-latex-over-my-current-document-system",
    "href": "01-LaTeX_1.html#why-should-i-choose-latex-over-my-current-document-system",
    "title": "The First LaTeX Document",
    "section": "Why should I choose LaTeX over my current document system?",
    "text": "Why should I choose LaTeX over my current document system?\nThere are several reasons to choose LaTeX over the document preparation system you are using right now. Firstly, LaTeX allows you to structure your document neatly, polish every detail to perfection, and re-use these settings for every document you prepare. Especially when it comes to creating tables, LaTeX performs much better in comparison with the ‘traditional’ document preparation systems. It is also great for referencing – when you include several tables and figures in your document and refer to them multiple times in different parts of the text, LaTeX will ensure that the order of their numbering is always correct and that you are always referring to the correct number. Moreover, it allows you to print a list of figures and tables in your document with just one line. LaTeX also comes with built-in bibliography capabilities, making citation and listing the resources you have used easier and more consistent than in the traditional document preparation systems. \nWhile content is obviously much more important than appearance when it comes to academic writing, the clean look of a document written in LaTeX simply gives it a more professional feel. If you are a student, you can literally make your essay look like a top journal article, which can impress the person marking it, possibly improving his or her appreciation of your work. Speaking of articles, writing, LaTeX is gradually becoming a standard in the majority of scientific journals, so if you are planning to publish anything, it will come in very handy.\nWhile there is a considerable learning curve when you start using LaTeX, investing some of your time into learning the basics will most certainly pay-off in your academic future. Hopefully, this module will help to make your first dive into the world of LaTeX as gentle as possible.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The First LaTeX Document</span>"
    ]
  },
  {
    "objectID": "01-LaTeX_1.html#the-toolbar",
    "href": "01-LaTeX_1.html#the-toolbar",
    "title": "The First LaTeX Document",
    "section": "The Toolbar",
    "text": "The Toolbar\nThe toolbar allows you to:\n\ncreate a new file\nbuild it and view it – see any changes you have made in your document without compiling a new pdf\ncompile the tex file into a pdf file, so you can read, print, or send the formatted version of your document",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The First LaTeX Document</span>"
    ]
  },
  {
    "objectID": "01-LaTeX_1.html#sections-and-subsections",
    "href": "01-LaTeX_1.html#sections-and-subsections",
    "title": "The First LaTeX Document",
    "section": "Sections and Subsections",
    "text": "Sections and Subsections\n\n\n\n\n\n\n\n\n\n\\documentclass{article} \n\\begin{document}  \n\\section{Introduction} Today we'll learn a bit about sections in LaTeX \n\\subsection{Smaller section} Dividing your LaTeX document into sections is very easy\nand intuitive. It helps you structure your document. \n\\subsubsection{An even smaller section} Content of the subsubsection \n\\end{document}\nTo structure your document, particularly when it’s a longer piece of work, it is often very useful to divide it into sections and subsections. LaTeX makes it quite easy and intuitive and automatically numbers your sections, so you can list them in the table of contents with one simple tag later. To create a new section simply add the \\section{} tag and insert the title of your section between the curly braces. You can further structure your document into subsections or even subsubsections, as shown in the example above. LaTeX enumerates your sections by default in the order you entered them. This enumeration is useful when you create a table of contents. However, if you don’t want your section to have a number in front of it, simply add an asterisk between the tag and the curly braces, for example \\section*{}. This also applies to subsections and subsubsections, as well as any LaTeX environments with default enumeration.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The First LaTeX Document</span>"
    ]
  },
  {
    "objectID": "01-LaTeX_1.html#paragraphs-line-breaks-and-spaces",
    "href": "01-LaTeX_1.html#paragraphs-line-breaks-and-spaces",
    "title": "The First LaTeX Document",
    "section": "Paragraphs, line breaks and spaces",
    "text": "Paragraphs, line breaks and spaces\nAs opposed to Word or Pages, LaTeX is not a What You See Is What You Get (WYSIWYG) editing tool. It means that, as you already might have noticed, the document you see in your editor doesn’t exactly resemble the final compiled pdf document you create. This can be a bit confusing for a new user, especially when it comes to dealing with basic text structures, such as line breaks, page breaks or paragraphs. In this section, you’ll learn that those things are very simple to do in LaTeX as well.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The First LaTeX Document</span>"
    ]
  },
  {
    "objectID": "01-LaTeX_1.html#line-breaks-and-page-breaks",
    "href": "01-LaTeX_1.html#line-breaks-and-page-breaks",
    "title": "The First LaTeX Document",
    "section": "Line breaks and page breaks",
    "text": "Line breaks and page breaks\n\n\n\n\n\n\n\n\n\n\\section{Paragraphs, line breaks and spaces}\n\\subsection{Line breaks}\nThis is a sentence about something.\nThe second sentence is not in a new line, even though it appears to be so in the TeX editor. \\\\\nHowever, this way we can get a new line in LaTeX Using markup tag 'newline' is also equivalent. \\newline\nMoreover, you don't need to even to use an enter on your keyboard \\\\ to start a new line. Although \\\\ it definitely makes your document structure easier to understand without compiling.\n\\subsection{Page breaks}\n\\clearpage \n\\subsection{Paragraphs}\n\nLine breaks\nWhen writing a TeX document, pressing ‘enter’ on your keyboard will not simply begin a new line in the complied document, even though it might look like it in your TeX editor window. You always need to press “enter” twice to produce a new line in the output document. Alternatively, you can use \\\\ as the notation for starting a new line – you can enter it wherever you want in your tex file, and everything written after that will be put in a new line (even if you don’t actually use “enter” at all – however, this usually means making your ‘raw’ Tex document less understandable for yourself).\n\n\nPage breaks\nThe tex file differs fundamentally from the document structure as its content is not divided into pages – instead, the file gets longer the more pages you add. In the compiled (i.e. final pdf) document, as soon as the volume of the content you set is larger than the space available within the current page, LaTeX starts a new page. However, often you might find yourself in a situation in which you want to start a new page before the text exceeds the capacity of the current one – a situation in which you would normally use the ‘page break’ button. In LaTeX that’s simply done by using a markup tag - \\newpage or \\clearpage. For the purpose of the introduction, you can consider them as equivalent, although they differ subtly in their treatment of objects such as tables or figures, which will be discussed later.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The First LaTeX Document</span>"
    ]
  },
  {
    "objectID": "01-LaTeX_1.html#paragraphs",
    "href": "01-LaTeX_1.html#paragraphs",
    "title": "The First LaTeX Document",
    "section": "Paragraphs",
    "text": "Paragraphs\nIn addition to line and page breaks, it’s useful to know how to start a new intended paragraph. In LaTeX that can be done simply by putting \\par at the end of the current paragraph. Everything set after that tag will begin from a new line with indentation. If you want to avoid that indentation, simply add \\noindent before beginning your new paragraph.\n\n\n\n\n\n\n\n\n\n\\subsection{Paragraphs}\nIt's common to divide longer pieces of text into paragraphs. In such situation, line break by itself won't suffice. \\par\nThat's how you divide text into paragraphs in LaTeX. You can also make your new paragraph not indented. \\par\n\\noindent That's how you do it. \\\\\n\nThis also begins as a new paragraph, as 'enter' was typed twice in the tex document.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The First LaTeX Document</span>"
    ]
  },
  {
    "objectID": "01-LaTeX_1.html#spaces",
    "href": "01-LaTeX_1.html#spaces",
    "title": "The First LaTeX Document",
    "section": "Spaces",
    "text": "Spaces\nIf you want to add larger spaces in your text, either horizontally or vertically, LaTeX comes with some special commands. These generally do not seem to work in the online platform, so if you want to play around with these, please use TexStudio on your own computer.\nFor horizontal spaces, instead of pressing your space bar repeatedly (hint: it wouldn’t work in LaTeX). You can use the markup tag \\hspace{}, specifying the size of the space you want to insert in the curly braces. This can be done in metric units (e.g. \\hspace{2cm} or \\hspace{20mm}), points (e.g. \\hspace{5pt}) or inches (e.g. \\hspace{1in}), amongst others.\nIf you want a part of your sentence to begin from the right margin (for example when putting a name on the left side and date on the right side in the same line at the end of a letter), you can use the markup tag \\hfill. Everything after that will be aligned to the right margin.\nNote that you cannot begin your line with \\hfill to align your sentence to the right. That can be done using \\flushright environment and is discussed in the next section on the text alignment.\n\\subsection{Spaces}\n\\subsubsection{Horizontal}\n%hspace:\nThis sentence has a \\hspace{3cm} large space in it.\\\\\n%hfill:\nFrom this point \\hfill this sentence starts from the other margin.\n\n\\subsubsection{Vertical}\n%vspace\nThat's is an example sentence about something.\n\\vspace{3cm} \\\\\nThere's a considerable distance between this sentence and the previous sentence.\n%vfill\n\\vfill\n\\noindent This sentence, on the other hand, starts at the bottom margin of the page. When you write, it will gradually \"grow\" towards the last sentence before the vertical fill.\nThe analogous markup tags are can be used for vertical spaces: \\vspace{} allows you to specify the distance between the current and next line in the curly braces, and \\vfill moves everything written after it to the bottom of the page.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The First LaTeX Document</span>"
    ]
  },
  {
    "objectID": "01-LaTeX_1.html#skips",
    "href": "01-LaTeX_1.html#skips",
    "title": "The First LaTeX Document",
    "section": "Skips",
    "text": "Skips\nFinally, you can add horizontal gaps without specifying the distance, by using “skip” markup tags. There are three variants available: \\smallskip, \\medskip and \\bigskip, each associated with a different size of vertical space between lines. You can see how to use them in the example below.\n\n\n\n\n\n\n\n\n\n\\subsection{Skips}\n\nSo far we've discussed vertical and horizontal spaces.\\\\\nThere are other ways to add breaks between lines.\\\\\n\\smallskip\nIn this case, there's a distance of 3pts added between the lines. \\\\\n\\medskip\nIn this case, there's a distance of 6pts added between the lines. \\\\\n\\bigskip\nFinally, in this case, there's a distance of 12 pt of space between the lines.\\\\",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The First LaTeX Document</span>"
    ]
  },
  {
    "objectID": "01-LaTeX_1.html#text-alignment",
    "href": "01-LaTeX_1.html#text-alignment",
    "title": "The First LaTeX Document",
    "section": "Text Alignment",
    "text": "Text Alignment\nBy default, LaTeX article class documents are aligned to left and justified (this means aligned along the left margin, and letter- and word-spacing is adjusted so that the text falls flush with both margins).\nHowever, you can centre the text in your document easily, using the ‘centre’ environment.\n\n\n\n\n\n\n\n\n\nBy default, LaTeX article class documents are aligned to left and justified (i.e.aligned along the left margin, and letter- and word-spacing is adjusted so that the text falls flush with both margins).\n\n\\begin{center}\nHowever, you can centre the text in your document easily, using the 'center' environment. Then, the text has an even gap between each side of it from each margin.\\end{center}\n\n\\begin{flushleft}\nYou can also align your text to the left. In such situation, the text won't be justified as a it would be by default in LaTeX article class document. \\end{flushleft}\n\n\\begin{flushright}\nBy analogy, the text can also be aligned to the right, as you can see in this final example.\\end{flushright}\nSimilarly to text editors you might be used to, LaTeX also allows you to flush the text left, so it is not aligned to both sides, but only to the left (a default setting in Microsoft Word) or flush it right, so it’s only aligned to the right.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The First LaTeX Document</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html",
    "href": "02-LaTeX_2.html",
    "title": "Tables, Figures, and References",
    "section": "",
    "text": "Introduction\nIn this chapter, we will cover the following topics:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#including-figures",
    "href": "02-LaTeX_2.html#including-figures",
    "title": "Tables, Figures, and References",
    "section": "Including Figures",
    "text": "Including Figures\nGraphicx package and basic figures\nThe LaTeX package graphicx makes it possible to insert external graphics into your document. To use the package, simply include the tag \\usepackage{graphicx} in the preamble of your document, as in the example below.\n\n\n\n\n\n\n\n\n\n\\documentclass{article}\n%load packages:\n\\usepackage{graphicx}\n%document info:\n\\title{Sample LaTeX document}\n\\date{20 April 2019}\n\\author{John Doe \\\\ \n    Department of Politics and International Studies \\\\ \n    University of Warwick}\n\\begin{document}\n    Some sample text.\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#including-a-picture",
    "href": "02-LaTeX_2.html#including-a-picture",
    "title": "Tables, Figures, and References",
    "section": "Including a Picture",
    "text": "Including a Picture\nIn order to include a picture, simply use the \\includegraphics markup tag surrounded by the figure environment, as seen in the screenshot below.\n\n\n\n\n\n\n\n\n\n\\begin{figure}\n    \\includegraphics{koala.jpg}\n\\end{figure}\nNote that for that to work, the picture ‘coala.jpg’ has to be in the same directory (i.e. folder) as your .tex file. To insert a picture from another folder, simply reference its directory explicitly, as shown in the example below.\nFor Windows:\n\\begin{figure}\n\\includegraphics{C:/Users/Jon Doe/Pictures/koala.jpg}\n\\end{figure}\nFor Mac:\n\\begin{figure}\n\\includegraphics{/Library/Desktop Pictures/koala.jpg}\n\\end{figure}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#picture-dimensions",
    "href": "02-LaTeX_2.html#picture-dimensions",
    "title": "Tables, Figures, and References",
    "section": "Picture Dimensions",
    "text": "Picture Dimensions\nAs you can see the resulting picture is rather oversized, doesn’t fit the page and takes up a lot of space. That’s because, by default, LaTeX inserts a picture in its original size – similarly as when you insert graphics in traditional text editors such as Word. To avoid that, we can specify the picture’s size using square brackets before the curly brackets with the file name, as shown in the screenshot below.\n\n\n\n\n\n\n\n\n\n\\begin{figure}\n    \\includegraphics[width = \\textwidth]{koala.jpg}\n\\end{figure}\nThe resulting figure takes the width of the text written around the picture while maintaining its aspect ratio. We can also specify the size of the pictures manually in centimetres.\n\n\n\n\n\n\n\n\n\n\\begin{figure}\n    \\includegraphics[width = 12cm, height = 4cm]{koala.jpg}\n\\end{figure}\nThis, however, can result in distorting the original picture, as in the example. To fix that we can use the ‘keepaspectratio’ option. Which will make the picture as close as possible to the desired size, while maintaining the original aspect ratio of the file.\n\n\n\n\n\n\n\n\n\n\\begin{figure}\n    \\includegraphics[\n    width = 12cm,\n    height = 4cm,\n    keepaspectratio]{koala.jpg}\n\\end{figure}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#float-location",
    "href": "02-LaTeX_2.html#float-location",
    "title": "Tables, Figures, and References",
    "section": "Float Location",
    "text": "Float Location\nFigure is an example of one of the two float objects in LaTeX. You can use square brackets to choose the figure’s location on the page. Depending on the letter – h, t, b we can select the figure to be placed here, at the top of the page or at its bottom. However, note that LaTeX has some built-in parameters to determine what a ‘good’ positioning of a float object is. You may use the ‘!’ with your placement specification to force LaTeX to override its default parameters and rely on your suggestion instead.\n\n\n\n\n\n\n\n\n\nSome sample text. \n\n\\begin{figure}[h!]\n    \\includegraphics[width=\\textwidth]{koala.jpg}\n\\end{figure}    \n\nOther sample text.\n\n\n\n\n\n\n\n\n\nSome sample text. \n\n\\begin{figure}[t!]\n    \\includegraphics[width=\\textwidth]{koala.jpg}\n\\end{figure}    \n\nOther sample text.\n\n\n\n\n\n\n\n\n\nSome sample text. \n\n\\begin{figure}[b!]\n    \\includegraphics[width=\\textwidth]{koala.jpg}\n\\end{figure}    \n\nOther sample text.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#separation-lines",
    "href": "02-LaTeX_2.html#separation-lines",
    "title": "Tables, Figures, and References",
    "section": "Separation Lines",
    "text": "Separation Lines\nTo make it look a bit more like a table, you can add lines separating rows and columns. For rows, this is specified by adding the \\hline markup tag after the row you want the line to appear. For columns this is set alongside the column specification in the curly braces following the beginning of the tabular environment, using the vertical bar character |. For example \\begin{tabular}{c||c||c} means three columns with text centered in cells, separated by double vertical lines. Both can be seen in the example below:\n\n\n\n\n\n\n\n\n\nTable with horizontal separation lines.\n\\begin{center}\n    \\begin{tabular}{ccc}\n        1 & 2 & 3 \\\\\n        \\hline\n        4 & 5 & 6 \\\\\n        \\hline\n        \\hline\n        7 & 8 & 9 \\\\\n    \\end{tabular}\n\\end{center}\n\nTable with vertical separation lines.\n\\begin{center}\n    \\begin{tabular}{c|c||c}\n        1 & 2 & 3 \\\\\n        4 & 5 & 6 \\\\\n        7 & 8 & 9 \\\\\n    \\end{tabular}\n\\end{center}\nOnly because something is possible, does not mean you should do it. Never ever ever use vertical lines in a Table!\nYou can also use the brackets at the end of a row to add extra spacing before the beginning of the next row, which is particularly useful for table headers. Note that you need to specify the value and then the unit first – for example, [0.5ex] corresponds with roughly half of the height of a lowercase ‘x’ letter in the current font, while [0.5cm] would mean 0.5 centemeters. Check units in LaTeX for more information.\n\n\n\n\n\n\n\n\n\n\\begin{center}\n    \\begin{tabular}{l|c|r}\n     \\textbf{Col. 1} & \\textbf{Col. 2} & \\textbf{Col. 3} \\\\ [0.5ex]\n     \\hline \\hline\n     1 & 2 & 3 \\\\\n     4 & 5 & 6 \\\\\n     7 & 8 & 9 \\\\\n     10 & 11 & 12 \\\\\n     13 & 14 & 15 \\\\\n    \\end{tabular}\n\\end{center}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#fixed-width-of-columns",
    "href": "02-LaTeX_2.html#fixed-width-of-columns",
    "title": "Tables, Figures, and References",
    "section": "Fixed Width of Columns",
    "text": "Fixed Width of Columns\nIf you need to keep the width of a specified column, you can do that by using the p column type followed by curly braces indicating your desired width. As a result, if your text width exceeds the width of the row, it will be wrapped and the width of the row will decrease, as seen in the example.\n\n\n\n\n\n\n\n\n\n\\begin{center}\n    \\begin{tabular}{ p{2cm} | p{2cm} | p{2cm} }\n     \\textbf{Col. 1} & \\textbf{Col. 2} & \\textbf{Col. 3}\\\\ [0.1cm]\n     \\hline\n     This row will be longer to fit the length of this cell & text & text \\\\\n     \\hline\n     text & text & text\\\\\n     \\hline\n     text & text & text\\\\\n     \\hline\n    \\end{tabular}\n\\end{center}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#controlling-vertical-adjustment",
    "href": "02-LaTeX_2.html#controlling-vertical-adjustment",
    "title": "Tables, Figures, and References",
    "section": "Controlling Vertical Adjustment",
    "text": "Controlling Vertical Adjustment\nAs you might have noticed, the p column type discussed in the previous section aligns each row to the top border of the row. Sometimes, it might be useful to centre the content of each row vertically or align it to the bottom border. This can be done with the column types m{width}, which centres the column text vertically and b{width}, which aligns it to the bottom. These columns can be found in the array package, which can be loaded by putting \\usepackage{array} in the preamble of your document, similarily to the way it was done when loading the graphicx package used for including images in your document. Remember that you have to specify the width of these column types in any of the units supported by LaTeX, just as in the case of the p{width} column type.\n\n\n\n\n\n\n\n\n\nPresentation of how the \\textbf{m} column type works:\n\n\\begin{center}\n    \\begin{tabular}{m{2cm}|m{2cm}|m{2cm}}\n    Col. 1 & Col. 2 & Col. 3\\\\\n    \\hline\n    The sentence in this cell is wider than the pre-defined width, therefore it's wrapped into new lines. & Some text in the middle. & Some more text in the middle. \\\\\n    \\hline\n    \\end{tabular}\n\\end{center}\n\nPresentation of how the \\textbf{b} column type works:\n\n\\begin{center}\n    \\begin{tabular}{b{2cm}|b{2cm}|b{2cm}}\n        Col. 1 & Col. 2 & Col. 3\\\\\n        \\hline\n        The sentence in this cell is wider than the pre-defined width, therefore it's wrapped into new lines. & Some text at the bottom. & Some more text at the bottom. \\\\\n        \\hline\n    \\end{tabular}\n\\end{center}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#combining-rows-and-columns",
    "href": "02-LaTeX_2.html#combining-rows-and-columns",
    "title": "Tables, Figures, and References",
    "section": "Combining Rows and Columns",
    "text": "Combining Rows and Columns\nIt’s also often useful to combine several cells into one, either row-wise or column-wise. To combine columns, you can use the \\multicolumn markup tag. Following the tag, you need to specify three things in subsequent curly braces {number of columns}{column type}{text}. The \\multicolumn tag is simply treated as a cell content, but it reduces the number of cells in a given row (i.e. if you specified {c|c|c} at the beginning of the tabular environment and you merge two rows, you will only need to specify two cells – the merged one and the remaining one.\n\n\n\n\n\n\n\n\n\n\\begin{center}\n    \\begin{tabular}{c|c|c}\n        \\multicolumn{3}{c}{\\textbf{Table Header}} \\\\ [0.5ex]\n        \\hline\n        \\textbf{Col. 1} & \\textbf{Col. 2} & \\textbf{Col. 3} \\\\ [0.5ex]\n        \\hline\n        \\multicolumn{2}{c|}{1 \\& 2} & 3 \\\\\n        \\hline\n        4 & 5 & 6 \\\\\n        \\hline\n        7 & 8 & 9 \\\\\n        \\hline\n        10 & \\multicolumn{2}{|c}{11 \\& 12} \\\\\n        \\hline\n        13 & 14 & 15 \\\\\n    \\end{tabular}\n\\end{center}\nTo combine rows, remember to load the ‘multirow’ package. You can do that by putting \\usepackage{multirow} in the preamble of your document. The \\multirow markup tag allows you to specify three options in the curly braces – {number of rows}{width}{text}. To merge a cell row-wise, put the tag in the row in the cell in which you would like your extended cell to begin. Then specify the number of rows it will take. You can use ’*’ instead of the {width} parameters to maintain the default parameters of your tabular environment. Make sure that you leave the rows you want merged blank, as in the example below.\n\n\n\n\n\n\n\n\n\nThis is how you merge cells by row:\n\\begin{center}\n\\begin{tabular}{c|c|c}\n\\textbf{Col. 1} & \\textbf{Col. 2} & \\textbf{Col. 3} \\\\ [0.5ex]\n\\hline \\hline\n1 & 2 & 3 \\\\\n\\hline\n4 & \\multirow{2}*{5 \\& 8} & 6 \\\\\n\\cline{1-1} \\cline{3-3}\n7 & & 9 \\\\\n\\hline\n10 & 11 & \\multirow{2}*{12 \\& 15} \\\\\n\\cline{1-2}\n13 & 14 & \\\\\n\\end{tabular}\n\\end{center}\nThe \\cline{i-j} tag is a useful alternative to the \\hline tag discussed before when it comes to drawing horizontal lines in tables with merged cells. Using \\hline between two rows with some of the cells merged vertically would cause the line to go through the middle of the merged cells. \\cline{i-j} allows to avoid that, by specifying which range of cells from the previous row should be separated horizontally from the next row. The range is specified by the values i and j in the curly braces. So \\cline{2-5} will cause cells between the 2nd and 5th columns to be separated horizontally from the next row, while \\cline{3-3} would separate only the cell from the 3rd column.\nFinally, it’s possible to merge selected cells both row-wise and column-wise. To do this, you simply have to combine the \\muticolumn and \\multirow markup tags. For it to work, you need to first insert a \\multicolumn markup tag in the first row and cell you want to merge, and then put a \\multirow tag within it, specifying the number of rows you want to merge. Then, in all the following rows you want to be merged you need to specify an empty \\multicolumn tag, with the same specification as the ones before.\n\n\n\n\n\n\n\n\n\n\\begin{center}\n    \\begin{tabular}{c|c|c}\n        \\textbf{Col.1 } & \\textbf{Col. 2} & \\textbf{Col. 3} \\\\ [0.5ex]\n        \\hline \\hline\n        1 & 2 & 3 \\\\\n        \\hline\n        4 & 5 & 6 \\\\\n        \\hline\n        7 & \\multicolumn{2}{c}{\\multirow{2}*{8 \\& 9 \\& 11 \\& 12}}\\\\\n        \\cline{1-1}\n        10 & \\multicolumn{2}{c}{} \\\\\n        \\hline\n        13 & 14 & 15 \\\\\n    \\end{tabular}\n\\end{center}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#tabularx",
    "href": "02-LaTeX_2.html#tabularx",
    "title": "Tables, Figures, and References",
    "section": "Tabularx",
    "text": "Tabularx\nSo far you’ve learned how to specify the width of individual columns using the tabular environment. In some cases, it is also good to be able to specify the width of the entire table and keep the width of each column evenly distributed across the table. This can be achieved using the tabularx package. To use it, simply insert \\usepackage{tabularx} in the preamble of your document. Then you can use \\begin{tabularx}{width}{preamble} instead of the tabular environment. Width specifies the width of the entire table (similarily to the \\includegraphics markup tag used for including images in the document) – you can define it using various numeric units available in LaTeX (pt, cm, in) or in reference to the width of the text in the document, using \\textwidth. Tabularx contains a new column type, “X”, which means that the width of this column will be determined in relation to the width of the entire table. The rest of the table setup is exactly the same as in the tabular environment.\n\n\n\n\n\n\n\n\n\n\\begin{center}\n    \\begin{tabularx}{0.6\\textwidth}{X|X|X}\n        \\textbf{Col. 1} & \\textbf{Col. 2} & \\textbf{Col. 3} \\\\ [0.5ex]\n        \\hline \\hline\n        1 & 2 & 3 \\\\\n        \\hline\n        4 & 5 & 6 \\\\\n        \\hline\n        7 & 8 & 9 \\\\\n        \\hline\n        10 & 11 & 12 \\\\\n        \\hline\n        13 & 14 & 15 \\\\\n    \\end{tabularx}\n\\end{center}\nIn the tabularx environment, you can also mix the X column type with the tabular column type (l, r, c), so that the width of some of the columns is determined by overall table width (the X columns), while the width of others is determined by the width of the text/fixed (the l, r, c).\nSome of the columns can be determined by the width of the table, while either will be determined by the width of the text within them (using the default tabular formats – c for centred (l, r, c).\n\n\n\n\n\n\n\n\n\n\\begin{center}\n    \\begin{tabularx}{0.6\\textwidth}{X|c|X}\n        \\textbf{Col. 1} & \\textbf{Col. 2} & \\textbf{Col. 3} \\\\ [0.5ex]\n        \\hline \\hline\n        1 & 2 & 3 \\\\\n        \\hline\n        4 & 5 & 6 \\\\\n        \\hline\n        7 & 8 & 9 \\\\\n        \\hline\n        10 & 11 & 12 \\\\\n        \\hline\n        13 & 14 & 15 \\\\\n    \\end{tabularx}\n\\end{center}\nFinally, merging columns and rows can be applied in tabularx, just as in tabular:\n\n\n\n\n\n\n\n\n\n\\begin{center}\n    \\begin{tabularx}{0.8\\textwidth}{X|X|X}\n        \\textbf{Col. 1} & \\textbf{Col. 2} & \\textbf{Col. 3} \\\\ [0.5ex]\n        \\hline \\hline\n        1 & 2 & 3 \\\\\n        \\hline\n        4 & 5 & 6 \\\\\n        \\hline\n        7 & \\multirow{2}*{8 \\& 11} & 9 \\\\\n        \\cline{1-1} \\cline{3-3}\n        10 & & 12 \\\\\n        \\hline\n        13 & \\multicolumn{2}{c}{14 \\& 15} \\\\\n    \\end{tabularx}\n\\end{center}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#defining-new-column-types",
    "href": "02-LaTeX_2.html#defining-new-column-types",
    "title": "Tables, Figures, and References",
    "section": "Defining New Column Types",
    "text": "Defining New Column Types\nAs you might have noticed, the default “X” column type in LaTeX is not centred, and by default, we have no control over its positioning. However, this can be changed by defining a new column type in the document preamble, after you define all the packages used.\nThe \\newcolumntype command defines a new column type for the tabularx environment based on the default X column. The content of the first curly braces following the command is just the name we assign to the newly created column. Note that the name always has to be a single letter. In this case, for the sake of convenience and clarity, it’s good to name newly defined columns with capital letters (i.e. R for right justification, C for centring and L for left justification) – this makes them easy to remember and we avoid confusing them with the tabular column types defined with small letters.\nThe second curly braces contain the definition of the new column type. Without going into too much detail, it’s sufficient to remember that, counter-intuitively, \\raggedright defines to tabularx column to be justified to the left, \\centering to be centred and \\raggedleft to be justified to the right. It’s important to remember that these columns can be manually defined, rather than to memorize the exact content of the \\newcolumntype command – whenever you will need it, you can just simply copy and paste it.\nAs you can see in the example, with these newly defined columns we are able to control the justification of the cell content.\n\n\n\n\n\n\n\n\n\n\\documentclass{article}\n\\usepackage{multirow}\n\\usepackage{tabularx}\n\\newcolumntype{L}{&gt;{\\raggedright\\arraybackslash}X}\n\\newcolumntype{C}{&gt;{\\centering\\arraybackslash}X}\n\\newcolumntype{R}{&gt;{\\raggedleft\\arraybackslash}X}\n\\begin{document}\nAll three column types defined above are used in the table below:\n\\begin{center}\n\\begin{tabularx}{0.8\\textwidth}{L|C|R}\n\\textbf{Col. 1} & \\textbf{Col. 2} & \\textbf{Col. 3} \\\\ [0.5ex]\n\\hline \\hline\n1 & 2 & 3 \\\\\n\\hline\n4 & 5 & 6 \\\\\n\\hline\n7 & 8 & 9 \\\\\n\\hline\n10 & 11 & 12 \\\\\n\\hline\n13 & 14 & 15 \\\\\n\\end{tabularx}\n\\end{center}\n\\end{document}\nThe \\newcolumntype command also allows to make many other modifications and create your own, customizable column layouts. For example, by using \\newcolumntype{y}[1]{&gt;{\\centering\\arraybackslash}m{#1}} we can create a column type ‘y’, which is based on the type m (i.e. has a specified width and centres the text vertically), but also additionally applies horizontal centering as well. Generally, however, you don’t need to worry about understanding the intricacies of the \\newcolumntype syntax – usually, when you need to customize your columns, it’s enough to just search for suggestions online – it’s likely that some other people have encountered the problem before you, and the solution is already out there. Nevertheless, the ability to specify the width of a table to a fixed number and the customizability of the column types often makes the tabularx package more useful that the basic tabular.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#specifying-row-height",
    "href": "02-LaTeX_2.html#specifying-row-height",
    "title": "Tables, Figures, and References",
    "section": "Specifying Row Height",
    "text": "Specifying Row Height\ntabularx also makes it possible to set the height of rows in your document to a fixed value. You can do this by adding \\setlength{\\extrarowheight{height}} before the table in which you want to change the row heights. Every row of each table following this line in your .tex file will have this exact height. To change it back to the default setting, simply use \\setlength{\\extrarowheight{1pt}}.\nHere’s an example of how it works:\n\n\n\n\n\n\n\n\n\n\\bigskip\n\n%increase the row height\n\\setlength{\\extrarowheight}{10pt}   \n\\begin{tabular}{c|c|c}\n    1 & 2 & 3 \\\\\n    \\hline\n    4 & 5 & 6 \\\\\n    \\hline\n    7 & 8 & 9 \\\\\n\n\\end{tabular}\n\n\\bigskip\n\n%return to default values\n\\setlength{\\extrarowheight}{1pt}\n\n\\begin{tabular}{c|c|c}\n    1 & 2 & 3 \\\\\n    \\hline\n    4 & 5 & 6 \\\\\n    \\hline\n    7 & 8 & 9 \\\\\n\\end{tabular}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#the-table-floating-environment",
    "href": "02-LaTeX_2.html#the-table-floating-environment",
    "title": "Tables, Figures, and References",
    "section": "The ‘Table’ Floating Environment",
    "text": "The ‘Table’ Floating Environment\nSimilarily to figures, tables also have their own float environment in LaTeX. As you may remember, the floating environments allow to control the positioning of an object in the document. You can also add captions to these environments, as well as label them, which makes referencing tables anywhere in the document much easier.\n\n\n\n\n\n\n\n\n\n\\begin{table}[h!]\n    \\centering\n    \\begin{tabular}{c|c|c}\n        \\textbf{Col. 1} & \\textbf{Col. 2} &\\textbf{Col. 3}\\\\\n        \\hline\n        1 & 2 & 3 \\\\\n        4 & 5 & 6 \\\\\n        7 & 8 & 9 \\\\\n        10 & 11 & 12 \\\\\n        13 & 14 & 15 \\\\\n    \\end{tabular}\n\\caption{Some numbers}\n\\label{tab:num1}\n\\end{table}\n\nIn this sentence, I am referring to Table \\ref{tab:num1}.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#terminology",
    "href": "02-LaTeX_2.html#terminology",
    "title": "Tables, Figures, and References",
    "section": "Terminology",
    "text": "Terminology\nCan I just clarify what I mean by “Bibliography” and “List of References” (LoR). These are often used synonymously, or even worse erroneously (yes, I am looking at you, PAIS UG Handbook). So here goes:\n\nWhilst a list of references will only contain the works cited in the text, a bibliography also contains the sources you have used for background reading without including them in your output.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#the-list-of-references",
    "href": "02-LaTeX_2.html#the-list-of-references",
    "title": "Tables, Figures, and References",
    "section": "The List of References",
    "text": "The List of References\n\n.bib files\nSimilarly to other text editors, LaTeX allows you to create a bibliography source file, which can later be used to reference sources in the text. To store the list of sources, LaTeX uses a separate file with extension ‘.bib’. You can create them and edit them using TexStudio, just as you would for a normal .tex file. Note that it is best to save your .bib file in the same folder as the .tex file in which you want to include the bibliography. After a file is created, you simply use one line of LaTeX code and a reference section will appear at the end with all resources you have cited.\nWithin the .bib file, each entry has a specified structure, which allows you to specify the type of the resource, the label you assign to it, its author, year of publication and many others. The first example shows a BiBTeX entry for a journal article. Each entry begins with ‘@’, followed by the predefined BibTeX resource types (in this case, ‘article’). After that, a set of curly braces is opened – between them, you define the property of your resource. First a tag (in this case bartels2002) – this is a keyword you will use to cite the resource in your text, much like figure and table labels discussed earlier. You can tag each entry however you want, however it is good practice to stick to a coherent and clear naming convention, especially if you are planning to include many entries in your work. Following that are different attributes of your resource separated by commas. The value for each attribute is provided in curly braces after an “=” character.\n@article{bartels2002,\n    author = {Larry M. Bartels},\n    title       = {Beyond Running Tally: Partisan Bias in Political Perceptions},\n    journal     = {Political Behavior},\n    volume      = {24},\n    number      = {10},\n    pages       = {117-150},\n    year        = {2002},\n    month       = {6},\n    DOI         = {https://doi.org/10.1023/A:1021226224601}}\nThe examples below show the structure of other different resources – a book, a section in a collection (such as Oxford or Routledge Handbooks) and a miscellaneous object (such as a data set). In the examples, each entry is tagged by the author’s name followed by the year of publication. Note that many attributes are optional in most resource types and it’s up to you how detailed do you want to make the specification of each resource. More importantly, some of these are specific to a particular resource type (for example (‘booktitle’ will be meaningful for the @incollection resource type, but not for @article). \n@book{popper1934,\n    author      = {Karl R. Popper},\n    title       = {The Logic of Scientific Discovery},\n    year        =  {1934},\n    publisher   = {Routledge}}\n\n@incollection{bollen2008,\n    author      = {Kenneth A. Bollen and Sophia Rabe‐Hesketh and Anders Skrondal},\n    title       = {Structural Equation Models},\n    booktitle   = {The Oxford Handbook of Political Methodology},\n    year        =  {2008},\n    editor      = {Janet M. Box-Steffensmeier and Henry E. Brady and David Collier},\n    publisher   = {Oxford University Press}}\n\n@misc{worldbank2019,\n    author       = {{The World Bank Group}}, \n    title        = {{World Development Indicators}},\n    url          = {https://datacatalog.worldbank.org/dataset/world-development-indicators},\n    month        = {10},\n    year         = {2019}}\nIn the last example, {{The World Bank Group}} is placed in double curly braces. That is to specify that it is an organization (aka corporate author) rather than an individual that authored the resource, and that the order of the world in the name should be maintained when citing (the in-text citation should take the form of The World Bank Group, 2019 as opposed to Group, 2019 which would happen without the second set curly braces, as LaTeX would treat “World Bank Group” as a name of an individual same as “Larry M Bartels”, and therefore would use only the last word in the name, assuming it’s the surname).\nThe title of the dataset is also placed in double curly braces – that is because, by default, LaTeX makes only the first word in the resource title capitalized and the following words begin with a small letter. If you want to preserve the capitalization of any word in your title, put it in an additional set of curly braces. So title = {World Development Indicators} would yield World development indicators in the LoR section, while title = {{World Development Indicators}} would result in World Development Indicators.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#citing-.bib-resources",
    "href": "02-LaTeX_2.html#citing-.bib-resources",
    "title": "Tables, Figures, and References",
    "section": "Citing .bib Resources",
    "text": "Citing .bib Resources\n\n\n\n\n\n\n\n\n\n\\documentclass{article}\n\\usepackage[autostyle]{csquotes}\n\\usepackage[\n    backend=biber,\n    style=apa,\n    natbib=true]{biblatex}\n\\addbibresource{bibliography.bib}\n\\begin{document}\nIn this sentence, I reference the article \\textit{Beyond Running Tally: Partisan Bias in Political Perceptions} included in the bibliography \\citep{bartels2002}. \nThis sentence references the book of the Austrian-British philosopher Karl Popper \\citep[pp. 14--15]{popper1934}.\nThis sentence references a chapter in the Oxford Handbook of Political Methodology \\citep{bollen2008}.\nFinally, the last sentence refers to a World Bank Data Set, including measures such as HDI \\citep{worldbank2019}.\n\\bibliography{my_bibliography}\n\\end{document}\nIn order to start referencing resources in your text, all you need to do is load a dedicated package called biblatex in the preamble of your document. This package has a number of different citations styles of which “apa: is the most frequently used one in the Social Sciences. You also need to notify LaTeX of the the bibliography file you are using with a \\addbibresource after loading the biblatex package. The last thing you need to do is to add the line \\printbibliography where you wish the LoR to be placed. Then you can cite each entry in your bibliography using the \\parencite{resource} markup tag, where resource is the tag you have assigned in the .bib file. For example \\parencite{bollen2008} will compile as (Bollen et al., 2008). Alternatively, you can use \\textcite{bollen2008} will compile as Bollen et al. (2008). Additionally, you can use square brackets after the \\parencite and \\textcite tags to add a note to be included in the parentheses with the citation, for example, the exact pages to which you are referring. If you want to reference specific pages, say 14-15 of Popper’s book, you can do that by using \\parencite[see][pp. 14--15]{popper1934}, which compiles as (see Popper, 1934, pp. 14-15).\n\nNatbib citation\nI have grown up using Natbib, and that is perhaps why I find it easier to use. What is certainly true is that it gives you more control over the layout of your references than \\textcite and \\parencite. These are implemented in natbib with \\citet and \\citep, respectively. These commands are not only shorter, but they also have their alternative versions - \\citealp and \\citealt, which remove the parentheses entirely. The difference between \\citealp and \\citealt is that the latter separates the author’s name and publication year with a comma.\nUsing square brackets before the citation key allows you to add prefixes and suffixes in the citation. So, when using \\citep[option1][option2]{resource}, the option1 will be inserted before and option2 after the citation content. For example \\citep[see][p. 23]{bollen:2008} will render as (see Bollen et al., 2008, p. 23). We have enabled these ctation commans with natbib=TRUE in this function:\n\\usepackage[\n    backend=biber,\n    style=apa,\n    natbib=true]{biblatex}\nTable 1 summarizes the functionality of different citation commands in Natbib.\n\n\n\n\n\n\n\n\n\n\nCommand\nResult\n\n\n\n\n\\citep{cohen1989}\n(Cohen, 1989)\n\n\n\\citet{cohen1989}\nCohen (1989)\n\n\n\\citep[see][p. 920]{cohen1989}\n(see Cohen 1989, p. 920)\n\n\n\\citealp{cohen1989}\nCohen, 1989\n\n\n\\citealt{cohen1989}\nCohen 1989\n\n\n\\citet*{schadkeetal2007}\nSchadke, Sunstein & Hastie (2007)\n\n\n\n\n\n\nTable 1: NatBib Commands\n\n\n\n\n\n\n\n\nFootnote References\nIf you want to use footnote references, then the same setup as before applies, but you need to change the style of the biblatex command to “verbose”, such as:\n\\documentclass{article}\n\\usepackage[autostyle]{csquotes}\n\\usepackage[\n    backend=biber,\n    style=verbose,\n    natbib=true]{biblatex}\n\\addbibresource{bibliography.bib}\n\\begin{document}\nText\n\\bibliography{my_bibliography}\n\\end{document}\nTo produce footnote citations, you need to use \\footcite instead of the aforementioned \\textcite, \\parencite, \\citet, or \\citep.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#compiling-the-list-of-references",
    "href": "02-LaTeX_2.html#compiling-the-list-of-references",
    "title": "Tables, Figures, and References",
    "section": "Compiling the List of References",
    "text": "Compiling the List of References\nIn order to produce the LoR, you need to follow these steps in TeXstudio:\n\nCompile the document to pdf (press F5 as standard)\nRun “biber” which is th enegine to produce the LoR: Tools \\(\\rightarrow\\) Commands \\(\\rightarrow\\) Biber\nCompile the document to pdf again (press F5 as standard).\nDone!",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#endnotes",
    "href": "02-LaTeX_2.html#endnotes",
    "title": "Tables, Figures, and References",
    "section": "Endnotes",
    "text": "Endnotes\n\n\n\n\n\n\n\n\n\n\\documentclass{article}\n\\usepackage{endnotes}\n\n\\begin{document}\n\n\\section{Introduction}\n\nThis is a sentence that refers to a document endnote. \\endnote{Some text}\n\n\\clearpage\n\n\\theendnotes\n\n\\end{document}\nIf you prefer your footnotes to appear at the end of your document, use the package ‘endnotes’. To create an endnote use the \\endnote markup tag, and enter \\theendnotes in the part of your document in which you would like them to appear (usually at the end), similarly to the \\tableofcontents tag for the table of contents or the \\bibliography tag for references.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#in-text-references",
    "href": "02-LaTeX_2.html#in-text-references",
    "title": "Tables, Figures, and References",
    "section": "In-Text References",
    "text": "In-Text References\n\n.tex file\n.bib file\nWarwick Crest\nWarwick Text\nExample",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#footnote-references-1",
    "href": "02-LaTeX_2.html#footnote-references-1",
    "title": "Tables, Figures, and References",
    "section": "Footnote References",
    "text": "Footnote References\n\n.tex file\n.bib file\nWarwick Crest\nWarwick Text\nExample",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "02-LaTeX_2.html#footnotes",
    "href": "02-LaTeX_2.html#footnotes",
    "title": "Tables, Figures, and References",
    "section": "",
    "text": "Yes, I put this in bold, this is how much I care about this.↩︎\nDitto.↩︎",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tables, Figures, and References</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html",
    "href": "03-LaTeX_3.html",
    "title": "Advanced Documents",
    "section": "",
    "text": "Introduction\nThis Section will cover:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#first-beamer-presentation",
    "href": "03-LaTeX_3.html#first-beamer-presentation",
    "title": "Advanced Documents",
    "section": "First Beamer Presentation",
    "text": "First Beamer Presentation\nThe first example shows how to create a simple Beamer presentation consisting of two slides. Every beamer presentation begins with \\documentclass{beamer}. Beamer slides are called frames and every slide is simply a separate frame environment, opened by \\begin{frame} and closed by \\end{frame}. As you will see, many familiar structures used in the article class, such as itemize, enumerate or vspace also work in the beamer format.\n\\documentclass{beamer}\n\n\\begin{document}\n\\begin{frame}\n    Sample text on the first slide. \\\\\n    A bullet point list:\n    \\begin{itemize}\n        \\item A bullet point.\n        \\item Another bullet point.\n        \\item Third bullet point.\n     \\end{itemize}\n     \n\\end{frame}\n\n\\begin{frame}\n    Sample text on the second slide. \\\\\n    \\vspace{1cm}\n    A numbered list:\n    \\begin{enumerate}\n        \\item One\n        \\item Two\n        \\item Three\n    \\end{enumerate}\n\\end{frame}\n\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#title-frame",
    "href": "03-LaTeX_3.html#title-frame",
    "title": "Advanced Documents",
    "section": "Title Frame",
    "text": "Title Frame\nMost presentations begin with a slide containing its title and author’s credentials. Setting up a title frame in Beamer presentations is like preparing a title page in LaTeX articles. First, you need to specify the title and other details, such as the author’s name, date or institution you work for in the preamble of your document. Then, you simply use the \\titlepage tag within the frame environment. Note that in the example it is not necessary to explicitly open and close the frame environment using \\begin and \\end, as we are using only one tag inside it, and thus we can use a more concise formulation \\frame{\\titlepage}.\n\\documentclass{beamer}\n\n\\begin{document}\n    \\begin{frame}\n        Sample text on the first slide. \\\\\n        A bullet point list:\n        \\begin{itemize}\n            \\item A bullet point.\n            \\item Another bullet point.\n            \\item Third bullet point.\n        \\end{itemize}\n\\end{frame}\n\n\\begin{frame}\n        Sample text on the second slide. \\\\\n        \\vspace{1cm}\n        A numbered list:\n        \\begin{enumerate}\n            \\item One\n            \\item Two\n            \\item Three\n        \\end{enumerate}\n\\end{frame}\n\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#themes",
    "href": "03-LaTeX_3.html#themes",
    "title": "Advanced Documents",
    "section": "Themes",
    "text": "Themes\nLike other presentation software, LaTeX comes with several pre-defined themes, as well as allows you to define themes of your own. You can select a pre-defined LaTeX theme using \\usetheme{} in the preamble of your presentation. Each of the pre-defined themes can also be customized in terms of its colour scheme, using the \\usecolortheme{}. Note that you need to provide it with an existing colour scheme name rather than an arbitrary one. You can find an example list of beamer themes and their colour variants here. One of the important properties of the themes is that they often include a footer or a header which appears on every slide, summarising the information about the presentation, such as author, title, date or current slide number. The presentation information you provide in the preamble can often be too long to fit into the footer/header, so you can provide an optional short or abbreviated version of these. To do that, you can use the form \\author[short title]{Full title}, where short title will appear in the document footer and full title is only displayed on the title page. This can be seen in the example.\n\\documentclass{beamer}\n\\usetheme{madrid}\n\\usecolortheme{spruce}\n\n\\author[Doe]{Jon Doe}\n\\title[First Beamer]{My First Beamer Presentation}\n\\subtitle{This is a subtitle}\n\\institute[PAIS]{University of Warwick \\\\ Department of Politics and International Studies}\n\\date[21/02/2020]{21/02/2020 \\\\ Third LaTeX{} workshop}\n\n\\begin{document}\n\n\\frame{\\titlepage}\n\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#frame-title",
    "href": "03-LaTeX_3.html#frame-title",
    "title": "Advanced Documents",
    "section": "Frame Title",
    "text": "Frame Title\nEach frame can also have its heading. This is simply added using the \\frametitle{title} tag within the frame environment, where title is the heading you want to give to a certain frame.\n\\documentclass{beamer}\n\\usetheme{madrid}\n\\usecolortheme{spruce}\n\n\\author[Doe]{Jon Doe}\n\\title[First Beamer]{My First Beamer Presentation}\n\\subtitle{This is a subtitle}\n\\institute[PAIS]{University of Warwick \\\\ Department of Politics and International Studies}\n\\date[21/02/2020]{21/02/2020 \\\\ Third LaTeX{} workshop}\n\n\\begin{document}\n\n\\frame{\\titlepage}\n\n  \\begin{frame}\n        \\frametitle{This is a title for the current slide}\n        Some text.\n  \\end{frame}\n\n  \\begin{frame}\n        \\frametitle{Another title}\n        More text.\n  \\end{frame}\n\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#sections",
    "href": "03-LaTeX_3.html#sections",
    "title": "Advanced Documents",
    "section": "Sections",
    "text": "Sections\nYou can divide a beamer presentation into sections and subsections just as you would do in a LaTeX article. Note that these sections should be defined between frame environments, as shown in the example.\n\\documentclass{beamer}\n\\usetheme{madrid}\n\\usecolortheme{spruce}\n\n\\author[Doe]{Jon Doe}\n\\title[First Beamer]{My First Beamer Presentation}\n\\subtitle{This is a subtitle}\n\\institute[PAIS]{University of Warwick \\\\ Department of Politics and International Studies}\n\\date[21/02/2020]{21/02/2020 \\\\ Third LaTeX{} workshop}\n\n\n\\begin{document}\n\n  \\frame{\\titlepage}\n\n  \\section{Introduction}\n\n   \\begin{frame}\n       \\frametitle{This is a title for the current slide}\n       Some text.\n  \\end{frame}\n\n\\section{Conclusion}\n\n   \\begin{frame}\n       \\frametitle{Another title}\n       More text.\n  \\end{frame}\n\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#atbeginsection",
    "href": "03-LaTeX_3.html#atbeginsection",
    "title": "Advanced Documents",
    "section": "AtBeginSection",
    "text": "AtBeginSection\nNote that adding the section did not make any changes to our slide content or titles. This is because, by default, beamer uses section titles only to structure your document (for example, they can be seen when you add a table of contents, which will be discussed later). If you want each section to begin with a section title slide, you need to define that explicitly in the preamble of the LaTeX file, using AtBeginSection{}. You fill the curly braces with a frame, which will appear at the beginning of each section and you can use \\insertsectionhead parameter to reference the title of a section. Essentially, you are providing LaTeX with a template of a frame that will be used whenever a new section is started. So, adding this code in the preamble will cause LaTeX to add a slide with vertically centred section title in large bold font at the beginning of each new section. Note that this applies also to subsections – in that case, you would simply use AtBeginSubsection and \\insertsubsectionhead.\n\\AtBeginSection{\n    \\begin{frame}\n        \\vfill\n        \\Huge\n        \\textbf{\\insertsectionhead}\n        \\vfill\n    \\end{frame}\n}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#colour-boxes",
    "href": "03-LaTeX_3.html#colour-boxes",
    "title": "Advanced Documents",
    "section": "Colour Boxes",
    "text": "Colour Boxes\nTo improve presentation formatting, it is often good to put your text within a box that matches the presentation theme. This can be particularly useful for section title slides discussed before. Such boxes can be added to a beamer slide using the beamercolorbox environment. It is opened by \\begin{beamercolorbox}[options]{color}. There are a number of options that can be used in the brackets to customize the box properties. The most useful ones include:\n\nsep=dimension - specifies the separation between the text in the box and the box boundaries (dimension is a length value, for example, 5cm or 12pt)\ncenter, right and left – specifies the text alignment within the box\nround = true or false - determines whether the box corners are rounded or not\nshadow = true or false – specifies whether a shadow appears behind the box\n\n\\AtBeginSection{\n\\begin{frame}\n\\vfill\n\\begin{beamercolorbox}[sep=12pt,center,shadow=true,rounded=true]{frametitle}\n\\Large\n\\textbf{\\insertsectionhead}\n\\end{beamercolorbox}\n\\vfill\n\\end{frame}\n}\nThe curly braces determine to colour of the box. Note that you cannot use colour names or even colour themes as a keyword in the curly braces – instead, you can only refer to colours explicitly defined for the theme you are using or an object within the beamer presentation – it usually makes sense to set it to ‘title’ or ‘frametitle’, which sets the colour of the box to the same one as the background behind the title of the frame.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#table-of-contents",
    "href": "03-LaTeX_3.html#table-of-contents",
    "title": "Advanced Documents",
    "section": "Table of Contents",
    "text": "Table of Contents\nAdding a table of contents is as easy as it was in the article class – it is done by simply entering the \\tableofcontents tag in a separate frame. So the basic table of contents is set by:\n\\frame{\\tableofcontents}\nThe \\tableofcontents tag also comes with some options. A particularly useful one allows to only highlight the number of the current section in the table of contents. This can be done by using:\n\\frame{\\tableofcontents[currentsection]}\nIf you start your presentation with a table of contents acting as a presentation outline and want to gradually reveal the titles of subsequent sections while discussing the structure, then the pausesections option might be useful. When it’s used, each new element of the table of contents will be introduced on a new slide. \n\\frame{\\tableofcontents[pausesections]}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#overlays-and-pauses",
    "href": "03-LaTeX_3.html#overlays-and-pauses",
    "title": "Advanced Documents",
    "section": "Overlays and Pauses",
    "text": "Overlays and Pauses\nWhen delivering a presentation, revealing the entire content of a frame can often be overwhelming for the audience, who may get distracted trying to read everything, instead of listening to the person presenting. To keep everyone focused, it often helps to reveal the information one step at a time. Beamer makes this very easy (arguably easier than other presentation software such as PowerPoint), with the \\pause tag. Everything following the tag will appear on the next slide.\n\\begin{document}\n    \\begin{frame}\n        \\frametitle{Title of the slide}\n        \\pause\n        Elements in this slide will appear step-by-step:\n        \\pause\n        \\begin{enumerate}\n            \\item Element One\n            \\pause\n            \\item Element Two\n            \\pause\n            \\item Element Three\n        \\end{enumerate}\n    \\end{frame}\n\\end{document}\nOrder of appearance of frame elements can be further customized using overlay specification. The angle brackets (“&lt;” and “&gt;”) used after a markup tag determine on which slides will a certain element or formatting appear. For example, &lt;1&gt; stands for slide number one (of the current frame), &lt;2-4&gt; for the slide range between 2 and 4, and &lt;3,5&gt; for slide 3 and slide 5. The first example shows how it can be applied to a bullet-point list elements appearance:\n\\frametitle{Title of the slide}\n\\begin{itemize}\n\\item&lt;1-4&gt; This appears on all slides. \n\\item&lt;2,4&gt; This appears on the second one and the fourth one. \n\\item&lt;3&gt; This only appears on the third slide.\n\\end{itemize}\nIn the second example, you can see that the overlay specification also works with formattings, such as bold font, italics or font colour. \n\\begin{itemize}\n\\item \\textbf&lt;2&gt;{This point will appear in bold on the second slide.}\n\\item \\textit&lt;2&gt;{\\color&lt;3&gt;{red}{This point will appear in italics on the second slide and in red on the third.}}\n\\item \\alert&lt;3&gt;{This will be highlighted in in the third slide.}\n\\end{itemize}\nNote that the \\alert tag is often used to highlight the text in a colour, which is determined by the presentation theme and colour theme.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#columns",
    "href": "03-LaTeX_3.html#columns",
    "title": "Advanced Documents",
    "section": "Columns",
    "text": "Columns\nThe beamer class also allows you to control the placement of objects within a frame. The columns environment is used to specify a multi-column frame layout, which offers similar functionality to the ‘two content’ and ‘comparison’ layouts in Microsoft PowerPoint. The environment is opened by \\begin{columns}[options] and closed by \\end{columns}. The options that can be specified are shown in the table below – you can use two of them, by separating them by commas, for example, \\begin{columns}[t,onlytextwidth]. To specify a column, simply use \\column{width} within the columns environment, where the width parameter controls the width of the column.\n\\begin{frame}\n\\begin{columns}[t]\n\\column{.3\\textwidth}\n\\textbf{Column 1}: \\\\\n\\lipsum[1][1-2]\n\\column{.3\\textwidth}\n\\textbf{Column 2}: \\\\\n\\begin{itemize}\n\\item One\n\\item Two\n\\item Three\n\\end{itemize}\n\\end{columns}\n\\end{frame}\nTable 1 lists some useful options for the column environment:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nc\nCentral align columns\n\n\nb\nAlign column bottoms\n\n\nt\nAlign column tops\n\n\ntotalWidth =\nDetermines total joint width of the two columns\n\n\nonlytextwidth\nEquivalent to totalwidth = ∖∖textwidth\n\n\nT\nAlso top alignment, however using a different method (if formatting problems occur with t, try using T instead)\n\n\n\n\n\n\nTable 1: Column Formatting",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#blocks",
    "href": "03-LaTeX_3.html#blocks",
    "title": "Advanced Documents",
    "section": "Blocks",
    "text": "Blocks\nBlocks are useful when you want to highlight the importance of some text, for example, a quote. They are used to create a separated part of a Beamer frame with its own heading and distinct background color.\n\\begin{document}\n    \\begin{frame}\n        \\begin{block}{\\textbf{Important Message}}\n            \\lipsum[1][1-4]\n        \\end{block}\n        \\begin{itemize}\n            \\item Some\n            \\item Bullet\n            \\item Points\n        \\end{itemize}\n    \\end{frame}\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#figures-and-tables",
    "href": "03-LaTeX_3.html#figures-and-tables",
    "title": "Advanced Documents",
    "section": "Figures and Tables",
    "text": "Figures and Tables\nYou can use figures and tables in Beamer presentations just as you would in LaTeX articles. For example, you can present the relationship between two variables in two columns, one showing a regression table and the other the scatter plot of the data.\n\\begin{Verbatim}\n\\begin{document}\n    \\begin{frame}\n        \\begin{columns}[t]\n            \\column{.3\\textwidth}\n            \\textbf{Column 1}: \\\\\n            \\begin{table}[!htbp] \\centering \n                \\begin{tabular}{lc} \n                    \\\\[-1.8ex]\\hline \n                    & Regressand \\\\\n                    \\hline \\\\[-1.8ex]\n                    Regressor & 0.167$^{***}$ \\\\ \n                    & (0.002) \\\\ \n                    & \\\\ \n                    Constant & 0.843$^{***}$ \\\\ \n                    & (0.073) \\\\ \n                    & \\\\ \n                    \\hline \\\\[-1.8ex] \n                    N & 1,000 \\\\ \n                    R$^{2}$ & 0.823 \\\\ \n                    \\hline \\\\[-1.8ex]  \n                \\end{tabular} \n                \\caption{Regression results} \n            \\end{table} \n            \\column{.3\\textwidth}\n            \\textbf{Column 2}: \\\\\n            \\begin{figure}[!htbp]\n                \\includegraphics[width = \\columnwidth]{reg_plot.png}\n                \\caption{Scatter plot}\n            \\end{figure}\n        \\end{columns}\n    \\end{frame}\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#summary",
    "href": "03-LaTeX_3.html#summary",
    "title": "Advanced Documents",
    "section": "Summary",
    "text": "Summary\nThe functionalities listed in the previous slides are only a very basic list – Beamer offers many more options and graphic structures than you can use – a comprehensive overview is offered by this rather length Beamer documentation.\nImportant hint: when working with Beamer in practice, sometimes errors may persist when you re-compile the PDF file (by pressing the “play “ button in TeXStudio) even though your code is correct. In that case, this might be due to the auxiliary files created by TeX when you compile the document –a solution that is always worth trying is deleting these files – either by hand or using the “Clean auxiliary files” option in the “Tools” tab of TeXStudio.\nTo delete all of them, enter the following list into the “file extensions” field: log,aux,dvi,lof,lot,bit,idx,glo,bbl,bcf,ilg,toc,ind,out,blg,fdb_latexmk,fls,snm,nav,synctex.gz",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#main-file",
    "href": "03-LaTeX_3.html#main-file",
    "title": "Advanced Documents",
    "section": "Main File",
    "text": "Main File\nThe main file, mybook.tex binds everything together using the main document environment. The \\include command inserts the book chapters in a specified order. The \\input command is used to “copy and paste” the content of a tex file. In this case, it inserts the content of the header.tex file, which contains the book’s preamble. Finally, the \\addcontentsline command is used to add the “Bibliography” entry to the table of contents.\n\\input{header}\n\n\\begin{document}\n\n    \\include{chapters/titlepage}\n    \\clearpage\n    \\tableofcontents\n\n    \\include{chapters/01_introduction}\n    \\include{chapters/02_body}\n    \\include{chapters/03_conclusion}\n\n    %bibliography\n    \\cleardoublepage\n    \\addcontentsline{toc}{chapter}{Bibliography}\n    \\bibliographystyle{apa}\n    \\bibliography{bibliography/references}\n\n\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#the-preamble-file",
    "href": "03-LaTeX_3.html#the-preamble-file",
    "title": "Advanced Documents",
    "section": "The Preamble File",
    "text": "The Preamble File\nThe header.tex file contains everything that would normally be put in the document’s preamble, i.e. before the \\begin{document} statement. Note that this is done for clarity and is not necessary when using a simple book structure like the one in the example – the preamble could simply be placed at the beginning of the mybook.tex file, like in other document classes. However, with the growing complexity of the book, your preamble is likely to get filled with multiple package references and other code customizing the final output. Because of that, storing the preamble in a separate file is likely to make your life easier and keep the length of the main file to a minimum, so that it gives you a good overview of your book’s structure.\nWhen working with large documents, compiling the entire document while working on a specific chapter only may waste a lot of time. To avoid it, you can use the \\includeonly tag in the preamble of the book. It explicitly tells the LaTeX compiler which chapter files to use when you hit the “play” button in TeXStudio. For example, using \\includeonly{chapters/01_introduction} will mean that the \\include tags in the main file referencing other chapters than 01_introduction.tex will be ignored and their content will not be compiled in the final output.\n\\documentclass[a4paper,12pt]{book}\n\\usepackage{graphicx}\n\\usepackage{tabularx}\n\\usepackage{lipsum}\n\n\\author{James Doe}\n\\title{My PhD Thesis}\n\n%this allows you to compile the document with specified chapters only\n%\\includeonly{chapters/01_introduction}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#chapter-file",
    "href": "03-LaTeX_3.html#chapter-file",
    "title": "Advanced Documents",
    "section": "Chapter File",
    "text": "Chapter File\nThe chapter file resembles a normal LaTeX document, except for the fact that it has neither a preamble nor a \\begin{document} statement. Instead, it just begins with \\chapter{chaptertitle}. All the packages used in the chapters are defined globally in the book’s preamble.\n\\chapter{Introduction}\n\\section{First section}\nLet's begin with citation of \\citet{schadkeetal2007}.\\\\\n\n\\lipsum[1-5]\n\\begin{figure}[!h]\n    \\centering\n    \\includegraphics[width = 0.8\\textwidth]{images/01/koala.jpg}\n    \\caption{Picture of a coala}\n\\end{figure}\n\\section{Second section}\n\\lipsum[1-5]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#listings",
    "href": "03-LaTeX_3.html#listings",
    "title": "Advanced Documents",
    "section": "Listings",
    "text": "Listings\nReproducibility of results a key prerequisite of methodological transparency and one of the most important facets of quantitative research in social sciences. Every respectable scholar or analyst should allow his audience to go through his research cycle step-by-step, which involves providing them with the original data and the source-code used for the statistical analysis. Reading someone else’s code might often be a difficult task and providing some comments is likely to make it easier. The listings package allows you to include chunks of code in your documents, which makes it possible to prepare technical reports and appendices explaining your quantitative research.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#a-basic-example",
    "href": "03-LaTeX_3.html#a-basic-example",
    "title": "Advanced Documents",
    "section": "A Basic Example",
    "text": "A Basic Example\nLike every other package, listings needs to be loaded in the preamble of the document. The first example shows the minimal structure of a document using listings. \\lstset{language=R} is used to determine which language will you use as the input (in this case we use R). Then, the lstlisting environment is used to include code in the text. Note, that in the output, a different text style is used for function names, such as function, sqrt, sum, comments and variables to make the code more readable. \n\\documentclass{article}\n\\usepackage{listings}\n\\lstset{language=R}\n\\begin{document}\nThe following function is used to return L2 vector norm:\n\\begin{lstlisting}\nnorm &lt;- function(x){\n#calculate norm:\nsqrt(sum(x^2)) \n}\n\\end{lstlisting}\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#formatting-listings",
    "href": "03-LaTeX_3.html#formatting-listings",
    "title": "Advanced Documents",
    "section": "Formatting Listings",
    "text": "Formatting Listings\nTo make the code you include in your document more readable, you can add additional formatting to the lstlisting environment by setting different parameters through lstset. The example below shows some most important things that can be changed – you can check out the Listings package documentation for an exhaustive list.\n\\lstset{language=R,\nbasicstyle=\\ttfamily, %style used for listings\nnumbers=left, %code line numbers\nkeywordstyle=\\color{red}, %set color of keywords to red\ncommentstyle=\\color{blue}\\itshape,\nstringstyle=\\color{magenta}, %set comment color to green\ntabsize = 2, %set tabulation style\nemph={function}, %emphasize the words you want\nemphstyle=\\color{red}\\underbar, %choose emphasis style\nshowstringspaces = false, %without this, symbol will replace spaces in strings\ndeletekeywords = {se,set,data,model},\nmorekeywords={ggplot,FALSE,TRUE}\n}\nThe following function is used to return L2 vector norm:\n\\begin{lstlisting}\nnorm &lt;- function(x){\n#calculate norm:\nsqrt(sum(x^2)) \nprint(\"Task completed\")\n}\n\\end{lstlisting}\nSee Table 2 for a list of common parameters:\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nDescription\n\n\n\n\nlanguage\nWhich language you are using. This determines the default keywords to be highlighted.\n\n\nbasicstyle\nThe basic style used for listing. The teletype (\\ttfamily) font is a good choice. You can also alter the font size used for the listing.\n\n\nnumbers\nLocation of line numbers\n\n\nkeywordstyle\nFormatting of language keywords. You can use \\color{color} (this requires using color or xcolor packages). Other examples include \\itshape for italics, \\underbar for underscore and \\bfseries for the bold font.\n\n\ncommentstyle\nStyle of the comments.\n\n\nstrinstyle\nStyle of the strings\n\n\ntabsize\nTabulation size\n\n\nemph, emphstyle\nThis allows you to select a separate style for some words that you want to emphasize in the code\n\n\nshowstringspaces\nDetermines how spaces are shown in strings in the code\n\n\nmorekeywords\nAllows you to specify additional keywords you want to highlight using the keywordstyle\n\n\ndeletekeywords\nAllows you to specify keywords you don’t want to be highlighted\n\n\n\n\n\n\nTable 2: Formatting of Listings",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#using-source-files",
    "href": "03-LaTeX_3.html#using-source-files",
    "title": "Advanced Documents",
    "section": "Using Source Files",
    "text": "Using Source Files\nCopying and pasting your code might be effortful, especially if you make any changes to it after you put it in your document. Instead, you can use \\lstinputlisting[lines]{filename} tag, which allows you to input code directly from the source file you used in the analysis (for example an R script). Additionally, you can use the option brackets [] to specify the lines you want to insert. For example \\lstinputlisting[firstline = 2, lastline = 10]{script.R} will input lines 2 to 10 from file script.R (provided that the file is in the same location as the .tex file).\nThis code was used to produce the table and plot for one of the Beamer slides in the previous part of the course:\n\n\\lstinputlisting{graph_table.R}\n\n\\bigskip\n\n\\textbf{This code generates some toy data:}\n\\lstinputlisting[firstline = 5, lastline = 7]{graph_table.R}\n\n\\bigskip\n\n\\textbf{This code runs the regression model and gets the LaTeX output:}\n\\lstinputlisting[firstline = 10, lastline = 12]{graph_table.R}\n\n\\bigskip\n\n\\textbf{This code is used for plotting:}\n\\lstinputlisting[firstline = 14, lastline = 18]{graph_table.R}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#inline-code",
    "href": "03-LaTeX_3.html#inline-code",
    "title": "Advanced Documents",
    "section": "Inline code",
    "text": "Inline code\nFinally, you can use your code in the middle of your regular text, by using \\lstinline|yourcode|, for example:\nI used \\lstinline|apply(mydf, 1, function(x) sum(x))| to get a row-wise sum of the \\texttt{mydf}.\nThis makes it easy to reference specific parts of your syntax. It can also be used with a source file, like \\lstinputlisting.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#page-dimensions",
    "href": "03-LaTeX_3.html#page-dimensions",
    "title": "Advanced Documents",
    "section": "Page Dimensions",
    "text": "Page Dimensions\nThe package geometry provides an interface to change global parameters of the document and adjust various page dimensions. This can be done by either loading the package using \\usepackage{geometry} and then by using the command \\geometry{options} in the preamble of the document, or more concisely by specifying the options when loading the package, by \\usepackage[options]{geometry} – these are equivalent and can be used interchangeably, although the majority of LaTeX users seem to prefer the latter since it’s shorter. The options are comma-separated parameters that you may want to adjust, such as the paper size (a4paper, a3paper, legalpaper, etc.), textwidth and textheight (which are self-explanatory) or margin (which sets all the margins to a certain length).\n\\documentclass{article}\n\\usepackage{lipsum}\n\\usepackage[a4paper, margin = 2in]{geometry}\n\\begin{document}\n\\lipsum[10-15]\n\\end{document}\n\\documentclass{article}\n\\usepackage{lipsum}\n\\usepackage{geometry}\n\\geometry{a4paper, margin = 2in}\n\\begin{document}\n\\lipsum[10-15]\n\\end{document}\nThese two are equivalent.\nThe list of some basic parameters is shown in Table 3. Each of them can be set using different LaTeX length units such as cm or in. The total size of the page is divided into the text body and margins, which have separate parameters – this is shown in Figure adopted from the geometry package documentation, which discusses the intricacies of different parameters at length.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nDescription\n\n\n\n\ntextwidth and textheight\nWidth/height of the body\n\n\nwidth and height\nBy default, the same as textwidth and textheight. If includehead = true, includefoot = true or includemp = true, they include header, footer and margin sizes respectively.\n\n\ntop, bottom, left, right\nSize of specific margins\n\n\nmargin\nSize of all margins\n\n\nheadheight\nHeight of the header\n\n\nfootsep\nSpacing between the top of the footnote and the bottom of the text\n\n\nfootskip\nDistance between the bottom of the text and the bottom of the footnote \\\n\n\n\n\n\n\nTable 3: Geometry Options\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can also change page dimensions mid-document, using the \\newgeometry{options} command in your document with the options listed above. Then, using \\restoregeometry will restore the parameters of all pages set after \\newpage or \\clearpage to those set in the preamble. This is demonstrated in the example.\n\\documentclass{article}\n\n\\usepackage{lipsum}\n\\usepackage[a4paper, textheight = 28cm, \ntextwidth = 20cm]{geometry}\n\n\n\\begin{document}\n    \\lipsum[10-15]\n    \\newpage\n    \\newgeometry{textheight = 20cm, textwidth = 10cm}\n    \\lipsum[10-15]\n    \\newpage\n    \\restoregeometry\n    \\lipsum[10-15]\n\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#styling",
    "href": "03-LaTeX_3.html#styling",
    "title": "Advanced Documents",
    "section": "Styling",
    "text": "Styling\n\nPage number\n\\pagenumbering{style} – determines the numbering style from the page it’s used on. Note that whenever you use this command, the page numbering starts from the beginning. Styles that can be used include arabic, alph (lowercase letters), Alph (uppercase), roman (lowercase roman numerals), Roman (uppercase roman numerals).\n\n\nHeader and footer style\n\\pagestyle{style} sets the automatic styling of the header and the footer from the page it’s used on. The footer and header’s behaviour is also determined by the documentclass of the document. The default value of style is plain, which puts a plain page number in the footer of each page. Other possibilities include:\n\nempty – nothing in either the header or the footer\nheadings – running headings of the current section and page number\n\nA more useful alternative is offered by the fancyhdr package. It implements new pagestyle, fancy and allows you to control the left, right and central elements of the footer and header with simple commands in the document preamble. For example, \\rhead{text} sets the right footer and \\cfoot{text} sets the central footer. Their usage, along with some other useful styling tools, is shown in the example.\n\\documentclass{article}\n\n\\usepackage{lipsum}\n\\usepackage{fancyhdr}\n\\title{\\vspace{-10ex} Essay title}\n\\author{John Doe, John Smith and Stan Kowalski}\n\\date{}\n\n\\pagenumbering{roman} %lowercase roman numerals for page numbers\n\\renewcommand{\\thesection}{\\Roman{section}} %change section numerals to roman\n\n\\pagestyle{fancy}\n\\fancyhf{} %reset defefault header and footer\n\\lhead{\\nouppercase{\\leftmark}} %section name in the upper header\n\\rhead{Doe et al.} %author name on the right side of the header\n\\rfoot{\\thepage} %page number on the right side of the footer\n\n\n\\begin{document}\n    \\maketitle\n    \\section{Introduction}  \n    \\lipsum[1-3]\n    \\newpage\n    \\section{Body}  \n    \\lipsum[1-10]\n    \\newpage\n    \\section{Conclusion}\n    \\lipsum[1-5]\n\\end{document}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  },
  {
    "objectID": "03-LaTeX_3.html#shortcuts-and-special-escapes",
    "href": "03-LaTeX_3.html#shortcuts-and-special-escapes",
    "title": "Advanced Documents",
    "section": "Shortcuts and Special Escapes",
    "text": "Shortcuts and Special Escapes\n\nShortcuts\nTexstudio also comes with multiple keyboard shortcuts which make preparing documents in LaTeX slightly faster. Some of the most useful shortcuts are listed in Table 4. \n\n\n\n\n\n\n\n\n\n\nShortcut\nDescription\n\n\n\n\nCtrl/cmd + I\nItalics, i.e. \\textit\n\n\nCtrl/cmd + B\nBold, i.e. \\textbf\n\n\nCtrl/cmd + Return\nNewline \\\\\n\n\nCtrl/cmd + Shift + I\nNew \\item in itemize environment\n\n\nCtrl/cmd + E\nNew empty environmnent\n\n\n\n\n\n\nTable 4: Shortcuts in TeX Studio\n\n\n\n\n\n\n\n\nSpecial Escapes\nSome of the characters such as “$”, “%”, “#” or “_” have a special meaning in LaTeX and by default are interpreted as elements of the syntax, rather than the text. You can override it by using the “escape” signs, which is the backslash “\\”. So, for example, if you want to compile “15%”, you need to typeset “15\\%” to escape the percentage character. To escape the backslash itself, use the tag \\textbackslash.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Advanced Documents</span>"
    ]
  }
]