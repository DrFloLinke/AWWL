[["index.html", "Academic Writing with LaTeX Preface", " Academic Writing with LaTeX Florian Reiche Department of Politics and International Studies, University of Warwick Last Updated 20.06.2024 Preface Welcome to Analysing Quantitative Data with R! The purpose of this module is to introduce you to key components of the statistical programming language R and to demonstrate some of the most commonly used methods than can be applied to preprocess and analyse quantitative data. The module is divided into four parts. Please work through each part in your own time, and ensure to complete the exercises at the end of each chapter. If you have any queries in the meantime, please contact me under F.Reiche@warwick.ac.uk And now, I hope you enjoy the module! "],["introduction.html", "1 Introduction", " 1 Introduction In this section, we will cover the basics you need to know to create your first LaTeX document. This section will cover: Downloading and installation Sections and subsections Paragraphs, line breaks, spaces, and skips Text alignment Lists Font styles Table of contents Title pages "],["what-is-latex.html", "2 What is LaTeX? 2.1 Why should I choose LaTeX over my current document system?", " 2 What is LaTeX? LaTeX (pronounced lah-teck, or lay-teck) is a document preparation system, commonly used to prepare scientific publications, reports, presentations and many other types of documents. It can be seen as an alternative for other systems such as Microsoft’s Word and PowerPoint or Apple’s Pages and Keynote. As opposed to them, however, when preparing a document in LaTeX the user can only see the plain text they are writing, surrounded by markup tags – a fancy term for ‘commands’ telling LaTeX how it should format the document, similar to how HTML tags structure websites. Don’t be scared by those terms! It doesn’t have to do much with ‘real’ computer programming, all it takes to write in LaTeX is remembering few terms and the occasional use of Google search – after preparing the first few documents you can usually just use them as templates for new ones, limiting your memory load and effort to minimum. 2.1 Why should I choose LaTeX over my current document system? There are several reasons to choose LaTeX over the document preparation system you are using right now. Firstly, LaTeX allows you to structure your document neatly, polish every detail to perfection, and re-use these settings for every document you prepare. Especially when it comes to creating tables, LaTeX performs much better in comparison with the ‘traditional’ document preparation systems. It is also great for referencing – when you include several tables and figures in your document and refer to them multiple times in different parts of the text, LaTeX will ensure that the order of their numbering is always correct and that you are always referring to the correct number. Moreover, it allows you to print a list of figures and tables in your document with just one line. LaTeX also comes with built-in bibliography capabilities, making citation and listing the resources you have used easier and more consistent than in the traditional document preparation systems.  While content is obviously much more important than appearance when it comes to academic writing, the clean look of a document written in LaTeX simply gives it a more professional feel. If you are a student, you can literally make your essay look like a top journal article, which can impress the person marking it, possibly improving his or her appreciation of your work. Speaking of articles, writing, LaTeX is gradually becoming a standard in the majority of scientific journals, so if you are planning to publish anything, it will come in very handy. While there is a considerable learning curve when you start using LaTeX, investing some of your time into learning the basics will most certainly pay-off in your academic future. Hopefully, this module will help to make your first dive into the world of LaTeX as gentle as possible.  "],["download-and-installation.html", "3 Download and Installation", " 3 Download and Installation Via Texstudio… The LaTeX system can be used through many applications, but we recommend using the freely available application called Texstudio – it makes writing LaTeX documents simpler, as it suggests relevant markup tags when you start to type them (similarly to Google suggesting you search phrases), has many shortcuts for often used tags, taking the additional load off your memory and underlines many common errors you might make while writing in LaTeX. If you are using your own computer: You first need to install the LaTeX engine which is responsible for creating your document. You can download this, according to your operating system from https://www.latex-project.org/get/  You will be using LaTeX through a GUI (Graphical User Interface) called TexStudio. To get Texstudio just go to https://www.texstudio.org/, click download and in the download section select the suitable version, depending on your Operating System.  If you are using a University of Warwick managed computer: You can download Texstudio straight from the Software Centre, via the start menu. "],["intro-to-texstudio.html", "4 Intro to “TeXstudio” 4.1 The Toolbar", " 4 Intro to “TeXstudio” Via Texstudio… The interface of the app is fairly simple and you don’t need to know much to get started. As opposed to traditional text editors, in you first create and save a .tex file containing all your content with some so-called markup tags – you can think about the .tex file as a ‘cooking recipe’ for your final file. Your text, figures and bibliography are the ingredients and the markup tags act as cooking instructions (more on these in due course). The resulting document - which is always a pdf - can be viewed in the separate window by compiling the .tex file (click the double green arrow on the toolbar). “Compiling” is a fancy term to describe LaTeX simply following your commands and preparing the document as you requested in the tex file. By default, TeXstudio compiles the .pdf file in the same folder in which you have saved your .tex file. The entire procedure is reflected in TeXstudio’s interface – the screen consists of 3 main parts: the .tex file editor on the left – here you create your document. the file viewer on the right – here you can view how your document looks after compilation – you can update the viewer by clicking the double green arrow (‘build &amp; view’) the log and messages window at the bottom left – here you can see if any errors come up during the compilation of your file and if they do – in which line did they occur Both the viewer and the log window can be closed if you need more space for the tex editor. 4.1 The Toolbar The toolbar allows you to: create a new file build it and view it – see any changes you have made in your document without compiling a new pdf compile the tex file into a pdf file, so you can read, print, or send the formatted version of your document "],["minimum-structure-for-an-article-your-first-document-in-latex.html", "5 Minimum Structure for an article – your first document in LaTeX", " 5 Minimum Structure for an article – your first document in LaTeX To create a new document you need to open the .tex editor and type three simple markup tags, as shown below. \\documentclass{article} \\begin{document} Hello world! This is my first document written in LaTeX! \\end{document} The first one, \\documentclass{article} tells the LaTeX compiler that the document you are about to start is of the class ‘article’ – one of the many built-in document classes LaTeX has. For the purpose of introduction, we will focus on the article class. Other classes that can be used will be discussed towards the end of the course. Defining the class is necessary to create a LaTeX document, so always remember to do so in the first line of your .tex file! Typing anything before that will result in LaTeX producing an error when compiling and your document won’t be created. The class entails some default document parameters such as font, margins, paragraph spacings or page size. However, these can be changed for each document if desired – you’ll learn about that later. The second one \\begin{document} tells LaTeX that everything from this point is the content of the document. Everything entered before that tag – including the \\documentclass{article} tag – is known as the preamble of the document – it is there where all the properties of the document are declared – these include parameters such as margins or page size, or special packages used for different purposes. You will learn about some of them very soon. The preamble can contain only LaTeX markup tags and commands. Typing plain text in the preamble will result in LaTeX compiler error and your document will not be created. Finally, \\end{document} indicates the ending of the content of the document – anything typed after that tag won’t be included in the document. Anything after that tag won’t appear in the document. Remember to always put \\begin{document} before you start typing anything and \\end{document} at the end. Otherwise your content won’t be compiled and won’t appear in the final .pdf file. Later you will see, that such \\begin … \\end structure is common for LaTeX and used to declare the boundaries of other text structures (or environment, as they are called in the LaTeX jargon), such as tables, bullet-point lists or figures. "],["sections-and-subsections.html", "6 Sections and Subsections", " 6 Sections and Subsections \\documentclass{article} \\begin{document} \\section{Introduction} Today we&#39;ll learn a bit about sections in LaTeX \\subsection{Smaller section} Dividing your LaTeX document into sections is very easy and intuitive. It helps you structure your document. \\subsubsection{An even smaller section} Content of the subsubsection \\end{document} To structure your document, particularly when it’s a longer piece of work, it is often very useful to divide it into sections and subsections. LaTeX makes it quite easy and intuitive and automatically numbers your sections, so you can list them in the table of contents with one simple tag later. To create a new section simply add the \\section{} tag and insert the title of your section between the curly braces. You can further structure your document into subsections or even subsubsections, as shown in the example above. LaTeX enumerates your sections by default in the order you entered them. This enumeration is useful when you create a table of contents. However, if you don’t want your section to have a number in front of it, simply add an asterisk between the tag and the curly braces, for example \\section*{}. This also applies to subsections and subsubsections, as well as any LaTeX environments with default enumeration. "],["paragraphs-line-breaks-and-spaces.html", "7 Paragraphs, line breaks and spaces", " 7 Paragraphs, line breaks and spaces As opposed to Word or Pages, LaTeX is not a What You See Is What You Get (WYSIWYG) editing tool. It means that, as you already might have noticed, the document you see in your editor doesn’t exactly resemble the final compiled pdf document you create. This can be a bit confusing for a new user, especially when it comes to dealing with basic text structures, such as line breaks, page breaks or paragraphs. In this section, you’ll learn that those things are very simple to do in LaTeX as well. "],["line-breaks-and-page-breaks.html", "8 Line breaks and page breaks", " 8 Line breaks and page breaks \\section{Paragraphs, line breaks and spaces} \\subsection{Line breaks} This is a sentence about something. The second sentence is not in a new line, even though it appears to be so in the TeX editor. \\\\ However, this way we can get a new line in LaTeX Using markup tag &#39;newline&#39; is also equivalent. \\newline Moreover, you don&#39;t need to even to use an enter on your keyboard \\\\ to start a new line. Although \\\\ it definitely makes your document structure easier to understand without compiling. \\subsection{Page breaks} \\clearpage \\subsection{Paragraphs} Line breaks When writing a TeX document, pressing ‘enter’ on your keyboard will not simply begin a new line in the complied document, even though it might look like it in your TeX editor window. You always need to press “enter” twice to produce a new line in the output document. Alternatively, you can use ‘\\\\’ as the notation for starting a new line – you can enter it wherever you want in your tex file, and everything written after that will be put in a new line (even if you don’t actually use “enter” at all – however, this usually means making your ‘raw’ Tex document less understandable for yourself). Page breaks The tex file differs fundamentally from the document structure as its content is not divided into pages – instead, the file gets longer the more pages you add. In the compiled (i.e. final pdf) document, as soon as the volume of the content you set is larger than the space available within the current page, LaTeX starts a new page. However, often you might find yourself in a situation in which you want to start a new page before the text exceeds the capacity of the current one – a situation in which you would normally use the ‘page break’ button. In LaTeX that’s simply done by using a markup tag - \\newpage or \\clearpage. For the purpose of the introduction, you can consider them as equivalent, although they differ subtly in their treatment of objects such as tables or figures, which will be discussed later. "],["paragraphs.html", "9 Paragraphs", " 9 Paragraphs In addition to line and page breaks, it’s useful to know how to start a new intended paragraph. In LaTeX that can be done simply by putting at the end of the current paragraph. Everything set after that tag will begin from a new line with indentation. If you want to avoid that indentation, simply add before beginning your new paragraph.  \\subsection{Paragraphs} It&#39;s common to divide longer pieces of text into paragraphs. In such situation, line break by itself won&#39;t suffice. \\par That&#39;s how you divide text into paragraphs in LaTeX. You can also make your new paragraph not indented. \\par \\noindent That&#39;s how you do it. \\\\ This also begins as a new paragraph, as &#39;enter&#39; was typed twice in the tex document. "],["spaces.html", "10 Spaces", " 10 Spaces If you want to add larger spaces in your text, either horizontally or vertically, LaTeX comes with some special commands. These generally do not seem to work in the online platform, so if you want to play around with these, please use TexStudio on your own computer.  For horizontal spaces, instead of pressing your space bar repeatedly (hint: it wouldn’t work in LaTeX). You can use the markup tag \\hspace{}, specifying the size of the space you want to insert in the curly braces. This can be done in metric units (e.g. \\hspace{2cm} or \\hspace{20mm}), points (e.g. \\hspace{5pt}) or inches (e.g. \\hspace{1in}), amongst others.  If you want a part of your sentence to begin from the right margin (for example when putting a name on the left side and date on the right side in the same line at the end of a letter), you can use the markup tag \\hfill. Everything after that will be aligned to the right margin. Note that you cannot begin your line with \\hfill to align your sentence to the right. That can be done using \\flushright environment and is discussed in the next section on the text alignment. \\subsection{Spaces} \\subsubsection{Horizontal} %hspace: This sentence has a \\hspace{3cm} large space in it.\\\\ %hfill: From this point \\hfill this sentence starts from the other margin. \\subsubsection{Vertical} %vspace That&#39;s is an example sentence about something. \\vspace{3cm} \\\\ There&#39;s a considerable distance between this sentence and the previous sentence. %vfill \\vfill \\noindent This sentence, on the other hand, starts at the bottom margin of the page. When you write, it will gradually &quot;grow&quot; towards the last sentence before the vertical fill. The analogous markup tags are can be used for vertical spaces: \\vspace{} allows you to specify the distance between the current and next line in the curly braces, and \\vfill moves everything written after it to the bottom of the page. "],["skips.html", "11 Skips", " 11 Skips Finally, you can add horizontal gaps without specifying the distance, by using “skip” markup tags. There are three variants available: \\smallskip, \\medskip and \\bigskip, each associated with a different size of vertical space between lines. You can see how to use them in the example below. \\subsection{Skips} So far we&#39;ve discussed vertical and horizontal spaces.\\\\ There are other ways to add breaks between lines.\\\\ \\smallskip In this case, there&#39;s a distance of 3pts added between the lines. \\\\ \\medskip In this case, there&#39;s a distance of 6pts added between the lines. \\\\ \\bigskip Finally, in this case, there&#39;s a distance of 12 pt of space between the lines.\\\\ "],["text-alignment.html", "12 Text Alignment", " 12 Text Alignment By default, LaTeX article class documents are aligned to left and justified (this means aligned along the left margin, and letter- and word-spacing is adjusted so that the text falls flush with both margins). However, you can centre the text in your document easily, using the ‘centre’ environment. By default, LaTeX article class documents are aligned to left and justified (i.e.aligned along the left margin, and letter- and word-spacing is adjusted so that the text falls flush with both margins). \\begin{center} However, you can centre the text in your document easily, using the &#39;center&#39; environment. Then, the text has an even gap between each side of it from each margin.\\end{center} \\begin{flushleft} You can also align your text to the left. In such situation, the text won&#39;t be justified as a it would be by default in LaTeX article class document. \\end{flushleft} \\begin{flushright} By analogy, the text can also be aligned to the right, as you can see in this final example.\\end{flushright} Similarly to text editors you might be used to, LaTeX also allows you to flush the text left, so it is not aligned to both sides, but only to the left (a default setting in Microsoft Word) or flush it right, so it’s only aligned to the right. "],["lists.html", "13 Lists", " 13 Lists While creating a document, you’ll sometimes find yourself in need of creating a bullet point or numbered list. In LaTeX it is quite simple to enter such a list – all you need to do is tag the beginning and end of the list section with either \\begin{enumerate} and \\end{enumerate} for numbered lists or \\begin{itemize} and \\end{itemize} for bullet-point lists. Each element of the list should begin with \\item markup tag, as seen in the example. This is a numbered list: \\begin{enumerate} \\item First element of the numbered list. \\item Second element of the numbered list. \\item Third element of the numbered list. \\end{enumerate} This is a bullet point list: \\begin{itemize} \\item Those \\item elements \\item aren&#39;t \\item numbered. \\end{itemize} You can also combine lists: \\begin{enumerate} \\item There are several issues related to that, in order: \\begin{enumerate} \\item This is the first one. \\item This is the second one. \\end{enumerate} \\item Here we also need to mention couple of things, but without order: \\begin{itemize} \\item For example this... \\item ...or this. \\end{itemize} \\end{enumerate} "],["font-styles.html", "14 Font Styles", " 14 Font Styles Generally, LaTeX uses the Computer Modern font as default. Sometimes, you mind find it useful to modify its style or size. To modify the style of the font you are currently using you use special markup tags. For the bold font, you simply type \\textbf{text you want in bold}. Similarly, for italics you write \\textit{text you want in italics}. Finally, for underlined text, you use \\underline{text you want underlined}. \\noindent This is how you write \\textit{italics}, \\textbf{bold} and \\underline{underlined} text in LaTeX. \\\\ \\\\ You can also {\\footnotesize decrease} or {\\Large increase} the font for couple of words mid-sentence. \\\\ \\\\ What&#39;s even more useful, you can changed the font size of an entire area:\\\\ \\begin{footnotesize} This here is small text. \\end{footnotesize} \\\\ \\begin{large} This here is large text. \\end{large} \\\\ And this is the default size again! To change the font size from the default (which is 10pt. for the document class ‘article’), you can use markup tags describing the size you want. This can be done either mid-sentence or for entire area, as seen in the figure above. Table \\(\\ref{tbl:fontsize}\\) demonstrates the effect that different LaTeX commands have on the font in relation to the standard font size that has been set for the document. To make things a little bit easier for you, TeXstudio has dedicated buttons for font styles, similar to those you may be familiar with from text editors you have used, such as Microsoft Word – you can find them located left of the TeX file editor. "],["table-of-contents.html", "15 Table of Contents", " 15 Table of Contents To add a table of contents, that summarizes all the sections and subsections of your document in an orderly manner, along with corresponding page numbers, simply use the \\tableofcontents markup tag. The table of contents will appear in the place you decide to put the tag, regardless if it’s the beginning, middle or end of your document. \\begin{document} \\tableofcontents \\newpage \\section{Introduction} Today we&#39;ll learn a bit about sections in LaTeX. \\subsection{Smaller section} Dividing your LaTeX document into sections is very easy and intuitive. It helps you structure your document. \\subsubsection{An even smaller section} Content of the subsubsection. \\newpage "],["title-page.html", "16 Title Page", " 16 Title Page Apart from the document class, the preamble allows you to specify other document details, such as the author, date and title among others. These can later appear in the title page if you decide to put it in the document. Similarly to table of contents, the title will appear wherever you decide to place its markup tag, regardless of the location in the document. \\documentclass{article} \\title{Sample LaTeX document} \\date{20 April 2019} \\author{John Doe \\\\ Department of Politics and International Studies \\\\ University of Warwick} \\begin{document} \\maketitle \\end{document} "],["commenting-your-code.html", "17 Commenting your code", " 17 Commenting your code When designing a complicated document, it’s often helpful to make notes about future ideas for design improvements, places to enter figures or tables that haven’t been prepared yet and others. While such notes are useful, you may not necessarily want them to appear in your complied document. For example, imagine you are sending someone a draft of an article to review. While it is still work in progress with many notes and comments, you often don’t want the reader to see them, as it may make reading the document harder. For that sort of situations, LaTeX comes equipped with a special symbol ‘%’. Whenever it is entered. anything after it until the beginning of a new line in the tex file (not in the compiled document) will not be compiled – TeXStudio notifies you of that by displaying the text after % in grey colour. Try it out yourself! "],["introduction-1.html", "18 Introduction 18.1 Labels 18.2 Footnotes 18.3 Packages 18.4 Including Figures 18.5 Including a Picture 18.6 Picture Dimensions 18.7 Floats 18.8 Figure Captions (Flo’s Pet Hate) 18.9 Float Barriers 18.10 Sub-Figures 18.11 Setting Tables 18.12 The ‘Table’ Floating Environment 18.13 Lists of Figures and Tables 18.14 The Bibliography 18.15 Citing Bibliography Resources 18.16 Endnotes", " 18 Introduction In this chapter, we will cover the following topics: Labels Footnotes Including figures and pictures Captions Sub-figures Creating tables Citing bibliography resources Endnotes 18.1 Labels allows you to label different environments using the \\label{} tag and then later reference them in any part of your document using \\ref{}. In the example, you can see how to label and reference sections and subsections. Objects that can be labelled include paragraphs, figures, footnotes, tables and many others. You can use any word you want for each label, as long as every time you use a unique label. It’s a good practice, to keep your labels short and related to the object you are labelling – that way, you can remember them more easily once you need to reference them later in your document. The example presents a good practice of labelling objects first with the abbreviation for their type (e.g. sec for section, tab for table or fig for figure), followed by a colon and then by a short label of the particular object. It’s a common practice to do it like this, however, feel free to come up with a labelling scheme of your own. The numbering for each object is automatic, so you don’t have to worry about remembering which paragraph or figure number you want to reference – will update the number for you if you swap their order. 18.2 Footnotes You can add footnotes to your documents simply by using the markup tag \\footnote{}. The text that you insert between the curly braces will end up as a footnote in the bottom of the current page. Same as environments, footnotes can also be referenced, as seen in the example. 18.3 Packages has a lot of functionalities beyond those already discussed. Many of them are included in so-called ‘packages’. These are sets of utilities providing you with new functionalities and ways of customising your document. To add a new package, you simply insert the tag \\usepackage{name} in the preamble of your document. You will see how to use one of the most important packages in the next section, where you’ll learn how to insert figures into your document. 18.4 Including Figures Graphicx package and basic figures The package graphicx makes it possible to insert external graphics into your document. To use the package, simply include the tag \\usepackage{graphicx} in the preamble of your document, as in the example below. 18.5 Including a Picture In order to include a picture, simply use the \\includegraphics markup tag surrounded by the figure environment, as seen in the screenshot below. Note that for that to work, the picture ‘coala.jpg’ has to be in the same directory (i.e. folder) as your .tex file. To insert a picture from another folder, simply reference its directory explicitly, as shown in the example below. For Windows: For Mac: 18.6 Picture Dimensions As you can see the resulting picture is rather oversized, doesn’t fit the page and takes up a lot of space. That’s because, by default, inserts a picture in its original size – similarly as when you insert graphics in traditional text editors such as Word. To avoid that, we can specify the picture’s size using square brackets before the curly brackets with the file name, as shown in the screenshot below. The resulting figure takes the width of the text written around the picture while maintaining its aspect ratio. We can also specify the size of the pictures manually in centimetres. This, however, can result in distorting the original picture, as in the example. To fix that we can use the ‘keepaspectratio’ option. Which will make the picture as close as possible to the desired size, while maintaining the original aspect ratio of the file. 18.7 Floats As discussed before, whenever the text you are setting in the .tex file runs beyond the limit of the current page, it’s simply continued in the next page, similarly to what would happen in Word or Pages. Such rule cannot be applied to figures and tables, which need to appear entirely on one page – this is the rationale for using float objects in . Floats is the name for a special category of objects in , namely those that, unlike text, cannot be split between two pages. Those objects are figures and tables. Whenever you enter a floating environment in , you follow it by square brackets, in which you specify the default position it should appear on a new page. You will see the example of this in the next section, applied to figure positioning. The idea of floats results in a minor, yet very important distinction in when it comes to starting a new page. As mentioned earlier in this course, both \\newpage and \\clearpage can be used to create a new page. However, in the situation when there’s some float pending to be printed on the next page, \\clearpage will result in a separate page(s) in which all the queued floats will be inserted, and a new separate page for text will be inserted. When \\newpage is used, on the other hand, it will simply create a new page, even if there’s a float on it. The difference can be seen when typesetting the two variants below: 18.7.1 Float Location Figure is an example of one of the two float objects in . You can use square brackets to choose the figure’s location on the page. Depending on the letter – h, t, b we can select the figure to be placed here, at the top of the page or at its bottom. However, note that has some built-in parameters to determine what a ‘good’ positioning of a float object is. You may use the ‘!’ with your placement specification to force to override its default parameters and rely on your suggestion instead. 18.8 Figure Captions (Flo’s Pet Hate) Finally, every figure must1 include a caption to describe its content and a label, which can be referenced in the text (similarly to sections and footnotes, as discussed in previous sections). This caption must sit underneath2 the figure (or table). 18.9 Float Barriers Sometimes the float algorithm may be a little unpredictable and misplace your figure. Consider the simple example shown by the first code (note that the \\lipsum tag is simply used for generating dummy text for examples). You have two document sections, Secton I and Section II, and a Figure relevant to the content of Section I. Therefore, you want to place the Figure after all the Section I text, but before the heading of Section II. Because the text from Section I is long, it won’t fit the same page as the Figure. By default, will fill the remainder of the page with text from Section 2 and flush out the Figure on the next page. To prevent that, you can use the \\FloatBarrier tag from the placeins package. The \\FloatBarrier prevents floating environments from floating beyond the place you enter the tag. It is useful to place such barriers at the end of every section, to make sure that each figure remains in its relevant section. This can be seen in the second example:  18.10 Sub-Figures If you need a more advanced figure layout, allows you to join multiple sub-figures into one figure – each of them can have their own caption as well as a label for further referencing. Moreover, it’s easy to ensure that they are perfectly aligned with regard to one another, as well as to the overall text layout. To use subfigures, the first thing you will need to do is include \\usepackage{subcaption} in the preamble of your document. As you can see in the example, to divide a figure into several subfigures, we simply add a subfigure environment for each subfigure we want to include into one figure environment. Each subfigure environment is associated with its own positioning option specified in the square brackets. It usually makes sense to set them all to the same option (for example t in the example), as it leads to good alignment of the subfigures. Note that we also specify the width of each subfigure using the curly braces – in this case, each of the two koala photos has the width of 0.6 of the text width. When using \\includegraphics within the subfigure environment, we can set the width to \\textwidth, as the \\textwidth attribute is defined separately for the subfigure float (in this case as 0.6 of the document text width).  The distance and layout of the subfigures can be determined by using the spacing markup tags covered in Part 1 of the course. So for example by using \\ between the subfigure environments, we lay the subfigures out vertically, separated by a 5 mm space. In this example, on the other hand, the subfigures are placed in a horizontal 2 by 1 layout. That’s because the subfigure environments are separated by the \\hfill tag, which fills the space between them horizontally. Using \\hfill maximizes the possible distance between the two subfigures, however, \\hspace{} would also work if you want to specify the distance manually. Note that if you want to place several subfigures next to each other as in this example, their total width cannot exceed \\textwidth. So we can place two figures with width = 0.45\\textwidth or three figures with width = 0.3\\textwidth in this manner, but not two figures with width = 0.6\\width, as 0.6x2 = 1.2.  This last example shows a 3 by 1 horizontal layout of subfigures. 18.11 Setting Tables Tables are a useful way of presenting both qualitative and quantitative data in any written piece of work and can often be very helpful in summarizing complex ideas conveyed in the text. While setting them up in might appear a bit tedious at first, it gives you a high degree of flexibility and allows you to craft them just the way you want them to look. Moreover, for all those who would like to present the results of quantitative analysis, many commonly used statistical tools such as Stata (esttab) or R (stargazer, xtable and others) have packages that allow you to create publication-ready tables with one or two simple functions. Tables are set in using the tabular environment. The tabular environment begins with \\begin{tabular}{cols} and ends with \\end{tabular}. Instead of cols, however, we specify the number of columns our table has, as well as the location of text in each of them. So, for example, {ccc} would mean three columns with text centred in each of them, while {lr} would mean two columns, first one with text aligned to the left and the second one to the right. The three basic tabular column types are: - l – left-justified text in column - c – centred text in column - r – right-justified text in column  After defining the table, each row is entered by simply entering the content of each cell separated with the ‘&amp;’ character row-wise. To notify that a row ends, you use ‘\\\\’, the same character used to insert new line outside of the tabular environment. Note that the number of entries in each row must always match the number of rows specified in the curly braces at the beginning of the tabular environment. You can see a basic table in the example.     As you can see, the output produced by the example does not look too impressive. It may also appear quite tedious to enter all those ‘&amp;’ characters. Fortunately, TexStudio comes in handy with a button allowing you to enter a new row automatically and then only fill in the blank spaces with your content. It is located on the right-hand side of the application toolbar, several buttons to the right from the “compile” button, as seen below. 18.11.1 Separation Lines To make it look a bit more like a table, you can add lines separating rows and columns. For rows, this is specified by adding the \\hline markup tag after the row you want the line to appear. For columns this is set alongside the column specification in the curly braces following the beginning of the tabular environment, using the vertical bar character ‘|’. For example \\begin{tabular}{c||c||c} means three columns with text centered in cells, separated by double vertical lines. Both can be seen in the example below: Only because something is possible, does not mean you should do it. Never ever ever use vertical lines in a Table! You can also use the brackets at the end of a row to add extra spacing before the beginning of the next row, which is particularly useful for table headers. Note that you need to specify the value and then the unit first – for example, [0.5ex] corresponds with roughly half of the height of a lowercase ‘x’ letter in the current font, while [0.5cm] would mean 0.5 centemeters. Check units in for more information. 18.11.2 Fixed Width of Columns If you need to keep the width of a specified column, you can do that by using the p column type followed by curly braces indicating your desired width. As a result, if your text width exceeds the width of the row, it will be wrapped and the width of the row will decrease, as seen in the example. 18.11.3 Controlling Vertical Adjustment As you might have noticed, the p column type discussed in the previous section aligns each row to the top border of the row. Sometimes, it might be useful to centre the content of each row vertically or align it to the bottom border. This can be done with the column types m{width}, which centres the column text vertically and b{width}, which aligns it to the bottom. These columns can be found in the array package, which can be loaded by putting \\usepackage{array} in the preamble of your document, similarily to the way it was done when loading the graphicx package used for including images in your document. Remember that you have to specify the width of these column types in any of the units supported by , just as in the case of the p{width} column type. 18.11.4 Combining Rows and Columns It’s also often useful to combine several cells into one, either row-wise or column-wise. To combine columns, you can use the \\multicolumn markup tag. Following the tag, you need to specify three things in subsequent curly braces {number of columns}{column type}{text}. The \\multicolumn tag is simply treated as a cell content, but it reduces the number of cells in a given row (i.e. if you specified {c|c|c} at the beginning of the tabular environment and you merge two rows, you will only need to specify two cells – the merged one and the remaining one. To combine rows, remember to load the ‘multirow’ package. You can do that by putting \\usepackage{multirow} in the preamble of your document. The \\multirow markup tag allows you to specify three options in the curly braces – {number of rows}{width}{text}. To merge a cell row-wise, put the tag in the row in the cell in which you would like your extended cell to begin. Then specify the number of rows it will take. You can use ’*’ instead of the {width} parameters to maintain the default parameters of your tabular environment. Make sure that you leave the rows you want merged blank, as in the example below. The \\cline{i-j} tag is a useful alternative to the \\hline tag discussed before when it comes to drawing horizontal lines in tables with merged cells. Using \\hline between two rows with some of the cells merged vertically would cause the line to go through the middle of the merged cells. \\cline{i-j} allows to avoid that, by specifying which range of cells from the previous row should be separated horizontally from the next row. The range is specified by the values i and j in the curly braces. So \\cline{2-5} will cause cells between the 2nd and 5th columns to be separated horizontally from the next row, while \\cline{3-3} would separate only the cell from the 3rd column. Finally, it’s possible to merge selected cells both row-wise and column-wise. To do this, you simply have to combine the \\muticolumn and \\multirow markup tags. For it to work, you need to first insert a \\multicolumn markup tag in the first row and cell you want to merge, and then put a \\multirow tag within it, specifying the number of rows you want to merge. Then, in all the following rows you want to be merged you need to specify an empty \\multicolumn tag, with the same specification as the ones before. 18.11.5 Tabularx So far you’ve learned how to specify the width of individual columns using the tabular environment. In some cases, it is also good to be able to specify the width of the entire table and keep the width of each column evenly distributed across the table. This can be achieved using the tabularx package. To use it, simply insert \\usepackage{tabularx} in the preamble of your document. Then you can use \\begin{tabularx}{width}{preamble} instead of the tabular environment. Width specifies the width of the entire table (similarily to the \\includegraphics markup tag used for including images in the document) – you can define it using various numeric units available in (pt, cm, in) or in reference to the width of the text in the document, using \\textwidth. Tabularx contains a new column type, “X”, which means that the width of this column will be determined in relation to the width of the entire table. The rest of the table setup is exactly the same as in the tabular environment. In the tabularx environment, you can also mix the X column type with the tabular column type (l, r, c), so that the width of some of the columns is determined by overall table width (the X columns), while the width of others is determined by the width of the text/fixed (the l, r, c). Some of the columns can be determined by the width of the table, while either will be determined by the width of the text within them (using the default tabular formats – c for centred (l, r, c). Finally, merging columns and rows can be applied in tabularx, just as in tabular: 18.11.6 Defining New Column Types As you might have noticed, the default “X” column type in is not centred, and by default, we have no control over its positioning. However, this can be changed by defining a new column type in the document preamble, after you define all the packages used. The \\newcolumntype command defines a new column type for the tabularx environment based on the default X column. The content of the first curly braces following the command is just the name we assign to the newly created column. Note that the name always has to be a single letter. In this case, for the sake of convenience and clarity, it’s good to name newly defined columns with capital letters (i.e. R for right justification, C for centring and L for left justification) – this makes them easy to remember and we avoid confusing them with the tabular column types defined with small letters. The second curly braces contain the definition of the new column type. Without going into too much detail, it’s sufficient to remember that, counter-intuitively, \\raggedright defines to tabularx column to be justified to the left, \\centering to be centred and \\raggedleft to be justified to the right. It’s important to remember that these columns can be manually defined, rather than to memorize the exact content of the \\newcolumntype command – whenever you will need it, you can just simply copy and paste it. As you can see in the example, with these newly defined columns we are able to control the justification of the cell content. The \\newcolumntype command also allows to make many other modifications and create your own, customizable column layouts. For example, by using \\newcolumntype{y}[1]{&gt;{\\centering\\arraybackslash}m{#1}} we can create a column type ‘y’, which is based on the type m (i.e. has a specified width and centres the text vertically), but also additionally applies horizontal centering as well. Generally, however, you don’t need to worry about understanding the intricacies of the \\newcolumntype syntax – usually, when you need to customize your columns, it’s enough to just search for suggestions online – it’s likely that some other people have encountered the problem before you, and the solution is already out there. Nevertheless, the ability to specify the width of a table to a fixed number and the customizability of the column types often makes the tabularx package more useful that the basic tabular. 18.11.7 Specifying Row Height Tabualrx also makes it possible to set the height of rows in your document to a fixed value. You can do this by adding \\setlength{\\extrarowheight{height}} before the table in which you want to change the row heights. Every row of each table following this line in your .tex file will have this exact height. To change it back to the default setting, simply use \\setlength{\\extrarowheight{1pt}}. Here’s an example of how it works: 18.12 The ‘Table’ Floating Environment Similarily to figures, tables also have their own float environment in . As you may remember, the floating environments allow to control the positioning of an object in the document. You can also add captions to these environments, as well as label them, which makes referencing tables anywhere in the document much easier. 18.13 Lists of Figures and Tables Listing the figures and tables you’ve used in your document is very straightforward – to insert a list of figures, simply place a \\listoffigures markup tag in the place you want it to appear (usually beginning of the document) and to add a list of tables use \\listoftables. Note that for the figures and tables to be included in their respective lists, they need to have a caption added (using the \\caption{} tag inside their respective floats). Caution: once you include a \\listoffigures and \\listoftables in your document, creates two files in the directory of your .tex file and .pdf output, with extensions .lof (short for list of figures) and .lot (short for list of tables). If you make some changes and you want the lists to be updated, you will need to delete these files first. 18.14 The Bibliography 18.14.1 .bib files Similarly to other text editors, allows you to create a bibliography list, which can later be referenced. To store the bibliography, uses a separate file with extension ‘.bib’. You can create them and edit them using TexStudio, just as you would for a normal .tex file. Note that it is best to save your bibliography file in the same folder as the .tex file in which you want to include the bibliography. After a file is created, you simply use one line of code and a reference section will appear at the end with all resources you have cited. Note that if a resource is cited Within the .bib file, each bibliography entry has a specified structure, which allows you to specify the type of the bibliography resource, the label you assign to it, its author, year of publication and many others. The first example shows a BiBTeX bibliography entry for a journal article. Each entry begins with ‘@’, followed by the predefined BibTeX resource types (in this case, ‘article’). After that, a set of curly braces is opened – between them, you define the property of your bibliography resource. First a tag (in this case bartels2002) – this is a keyword you will use to cite the resource in your text, much like figure and table labels discussed earlier. You can tag each bibliography entry however you want, however it is good to stick to a coherent and clear naming convention, especially if you are planning to include many bibliography entries in your work. Following that are different attributes of your resource separated by commas. The value for each attribute is provided in curly braces after an “=” character. The examples below show the structure of other different resources – a book, a section in a collection (such as Oxford or Routledge Handbooks) and a miscellaneous object (such as a data set). In the examples, each entry is tagged by the author’s name followed by the year of publication. Note that many attributes are optional in most resource types and it’s up to you how detailed do you want to make the specification of each resource. More importantly, some of these are specific to a particular resource type (for example (‘booktitle’ will be meaningful for the @incollection resource type, but not for @article).  In the last example, {{The World Bank Group}} is placed in double curly braces. That is to specify that it is an organization (aka corporate author) rather than an individual that authored the resource, and that the order of the world in the name should be maintained when citing (the in-text citation should take the form of The World Bank Group, 2019 as opposed to Group, 2019 which would happen without the second set curly braces, as would treat “World Bank Group” as a name of an individual same as “Larry M Bartels”, and therefore would use only the last word in the name, assuming it’s the surname). The title of the dataset is also placed in double curly braces – that is because, by default, makes only the first word in the resource title capitalized and the following words begin with a small letter. If you want to preserve the capitalization of any word in your title, put it in an additional set of curly braces. So title = {World Development Indicators} would yield World development indicators in the bibliography section, while title = {{World Development Indicators}} would result in World Development Indicators. 18.15 Citing Bibliography Resources In order to start referencing resources in your text, all you need to do is load a dedicated package called NatBib in the preamble of your document, notify of the bibliography style you wish to use (\\bibliographystyle), and the bibliography file you are using with a \\bibliography markup tag at the end of the document. Then you can cite each entry in your bibliography using \\citep{resource} markup tag, where resource is the tag you have assigned in the .bib file. For example \\citep{bollen2008} will compile as (Bollen et al., 2008). Additionally, you can use square brackets after the \\citep tag to add a note to be included in the parentheses with the citation, for example, the exact pages to which you are referring. If you want to reference specific pages, say 14-15 of Popper’s book, you can do that by using \\citep[pp. 14–15]{popper1934}, which compiles as (Popper, 1934, pp. 14-15). NatBib contains various other citation formats and you can find a full list here.  Note that the \\bibliographystyle markup tag sets the style of your bibliography – that includes the layout of your bibliography at the end, as well as the citation style. The style “myapa” has been rewritten so that it conforms with the referencing requirements in PAIS. You can download it on Moodle, and you need to place it in the same folder as the .tex file. The full list of styles can be found here. 18.16 Endnotes If you prefer your footnotes to appear at the end of your document, use the package ‘endnotes’. To create an endnote use the \\endnote markup tag, and enter \\theendnotes in the part of your document in which you would like them to appear (usually at the end), similarly to the \\tableofcontents tag for the table of contents or the \\bibliography tag for references. Yes, I put this in bold, this is how much I care about this.↩︎ Ditto.↩︎ "],["introduction-2.html", "19 Introduction 19.1 Beamer Presentation 19.2 Books 19.3 Tips &amp; Tricks", " 19 Introduction This Section will cover: Beamer Presentations Writing long documents, such as dissertations or books Tips and Tricks 19.1 Beamer Presentation In the previous parts of the course, you have learned how to create documents. Note that until now you have used the article document format as specified by the \\documentclass{article} tag. includes many other document classes that you can use. As already mentioned at the beginning of the course, the class is essentially several pre-set document parameters, such as the size of pages, default font sizes and families for different environments, as well as specific commands. In this section, you will learn about another very popular class of documents called beamer, which allows you to create presentations, like those you could prepare using Microsoft PowerPoint or similar software. 19.1.1 First Beamer Presentation The first example shows how to create a simple Beamer presentation consisting of two slides. Every beamer presentation begins with \\documentclass{beamer}. Beamer slides are called frames and every slide is simply a separate frame environment, opened by \\begin{frame} and closed by \\end{frame}. As you can see, many familiar structures used in the article class, such as itemize, enumerate or vspace also work in the beamer format. 19.1.2 Title Frame Most presentations begin with a slide containing its title and author’s credentials. Setting up a title frame in Beamer presentations is like preparing a title page in articles. First, you need to specify the title and other details, such as the author’s name, date or institution you work for in the preamble of your document. Then, you simply use the \\titlepage tag within the frame environment. Note that in the example it is not necessary to explicitly open and close the frame environment using \\begin and \\end, as we are using only one tag inside it, and thus we can use a more concise formulation \\frame{\\titlepage}. 19.1.3 Themes Like other presentation software, comes with several pre-defined themes, as well as allows you to define themes of your own. You can select a pre-defined theme using \\usetheme{} in the preamble of your presentation. Each of the pre-defined themes can also be customized in terms of its colour scheme, using the \\usecolortheme{}. Note that you need to provide it with an existing colour scheme name rather than an arbitrary one. You can find an example list of beamer themes and their colour variants here. One of the important properties of the themes is that they often include a footer or a header which appears on every slide, summarising the information about the presentation, such as author, title, date or current slide number. The presentation information you provide in the preamble can often be too long to fit into the footer/header, so you can provide an optional short or abbreviated version of these. To do that, you can use the form \\author[short title]{Full title}, where  short title will appear in the document footer and full title is only displayed on the title page. This can be seen in the example.   19.1.4 Frame Title Each frame can also have its heading. This is simply added using the \\frametitle{title} tag within the frame environment, where title is the heading you want to give to a certain frame. 19.1.5 Sections You can divide a beamer presentation into sections and subsections just as you would do in a article. Note that these sections should be defined between frame environments, as shown in the example. 19.1.6 AtBeginSection Note that adding the section did not make any changes to our slide content or titles. This is because, by default, beamer uses section titles only to structure your document (for example, they can be seen when you add a table of contents, which will be discussed later). If you want each section to begin with a section title slide, you need to define that explicitly in the preamble of the file, using AtBeginSection{}. You fill the curly braces with a frame, which will appear at the beginning of each section and you can use \\insertsectionhead parameter to reference the title of a section. Essentially, you are providing with a template of a frame that will be used whenever a new section is started. So, adding this code in the preamble will cause to add a slide with vertically centred section title in large bold font at the beginning of each new section. Note that this applies also to subsections – in that case, you would simply use AtBeginSubsection and \\insertsubsectionhead. 19.1.7 Colour Boxes To improve presentation formatting, it is often good to put your text within a box that matches the presentation theme. This can be particularly useful for section title slides discussed before. Such boxes can be added to a beamer slide using the beamercolorbox environment. It is opened by \\begin{beamercolorbox}[options]{color}. There are a number of options that can be used in the brackets to customize the box properties. The most useful ones include: sep=dimension - specifies the separation between the text in the box and the box boundaries (dimension is a length value, for example, 5cm or 12pt) center, right and left – specifies the text alignment within the box round = true or false - determines whether the box corners are rounded or not shadow = true or false – specifies whether a shadow appears behind the box The curly braces determine to colour of the box. Note that you cannot use colour names or even colour themes as a keyword in the curly braces – instead, you can only refer to colours explicitly defined for the theme you are using or an object within the beamer presentation – it usually makes sense to set it to ‘title’ or ‘frametitle’, which sets the colour of the box to the same one as the background behind the title of the frame. 19.1.8 Table of Contents Adding a table of contents is as easy as it was in the article class – it is done by simply entering the \\tableofcontents tag in a separate frame. So the basic table of contents is set by: The \\tableofcontents tag also comes with some options. A particularly useful one allows to only highlight the number of the current section in the table of contents. This can be done by using: If you start your presentation with a table of contents acting as a presentation outline and want to gradually reveal the titles of subsequent sections while discussing the structure, then the pausesections option might be useful. When it’s used, each new element of the table of contents will be introduced on a new slide.  19.1.9 Overlays and Pauses When delivering a presentation, revealing the entire content of a frame can often be overwhelming for the audience, who may get distracted trying to read everything, instead of listening to the person presenting. To keep everyone focused, it often helps to reveal the information one step at a time. Beamer makes this very easy (arguably easier than other presentation software such as PowerPoint), with the \\pause tag. Everything following the tag will appear on the next slide. Order of appearance of frame elements can be further customized using overlay specification. The angle brackets (“&lt;” and “&gt;”) used after a markup tag determine on which slides will a certain element or formatting appear. For example, &lt;1&gt; stands for slide number one (of the current frame), &lt;2-4&gt; for the slide range between 2 and 4, and &lt;3,5&gt; for slide 3 and slide 5. The first example shows how it can be applied to a bullet-point list elements appearance: In the second example, you can see that the overlay specification also works with formattings, such as bold font, italics or font colour.  Note that the \\alert tag is often used to highlight the text in a colour, which is determined by the presentation theme and colour theme. 19.1.10 Columns The beamer class also allows you to control the placement of objects within a frame. The columns environment is used to specify a multi-column frame layout, which offers similar functionality to the ‘two content’ and ‘comparison’ layouts in Microsoft PowerPoint. The environment is opened by \\begin{columns}[options] and closed by \\end{columns}. The options that can be specified are shown in the table below – you can use two of them, by separating them by commas, for example, \\begin{columns}[t,onlytextwidth]. To specify a column, simply use \\column{width} within the columns environment, where the width parameter controls the width of the column. Table \\(\\ref{tbl:colformat}\\) lists some useful options for the column environment: 19.1.11 Blocks Blocks are useful when you want to highlight the importance of some text, for example, a quote. They are used to create a separated part of a Beamer frame with its own heading and distinct background color. 19.1.12 Figures and Tables You can use figures and tables in Beamer presentations just as you would in articles. For example, you can present the relationship between two variables in two columns, one showing a regression table and the other the scatter plot of the data. 19.1.13 Summary The functionalities listed in the previous slides are only a very basic list – Beamer offers many more options and graphic structures than you can use – a comprehensive overview is offered by this rather length Beamer documentation. Important hint: when working with Beamer in practice, sometimes errors may persist when you re-compile the PDF file (by pressing the “play “ button in TeXStudio) even though your code is correct. In that case, this might be due to the auxiliary files created by TeX when you compile the document –a solution that is always worth trying is deleting these files – either by hand or using the “Clean auxiliary files” option in the “Tools” tab of TeXStudio. To delete all of them, enter the following list into the “file extensions” field: log,aux,dvi,lof,lot,bit,idx,glo,bbl,bcf,ilg,toc,ind,out,blg,fdb_latexmk,fls,snm,nav,synctex.gz 19.2 Books The last document class covered in the course is book. Books can be thought of as a more complex version of the article class – they are likely to consist of multiple chapter files with one “master” file binding them all together. This class is particularly useful when preparing a longer piece of academic work, such as a PhD thesis. This section will briefly go through an example book structure which you can download here. The book folder should always follow a tree-like structure, summarized below. Each chapter is a separate tex file and all the chapters are stored in the same folder. Similarly, all the image files used in the book are stored in a separate folder, with sub-folders corresponding to each chapter number. 19.2.1 Main File The main file, mybook.tex binds everything together using the main document environment. The \\include command inserts the book chapters in a specified order. The \\input command is used to “copy and paste” the content of a tex file. In this case, it inserts the content of the header.tex file, which contains the book’s preamble. Finally, the \\addcontentsline command is used to add the “Bibliography” entry to the table of contents. 19.2.2 The Preamble File The header.tex file contains everything that would normally be put in the document’s preamble, i.e. before the \\begin{document} statement. Note that this is done for clarity and is not necessary when using a simple book structure like the one in the example – the preamble could simply be placed at the beginning of the mybook.tex file, like in other document classes. However, with the growing complexity of the book, your preamble is likely to get filled with multiple package references and other code customizing the final output. Because of that, storing the preamble in a separate file is likely to make your life easier and keep the length of the main file to a minimum, so that it gives you a good overview of your book’s structure. When working with large documents, compiling the entire document while working on a specific chapter only may waste a lot of time. To avoid it, you can use the \\includeonly tag in the preamble of the book. It explicitly tells the compiler which chapter files to use when you hit the “play” button in TeXStudio. For example, using \\includeonly{chapters/01_introduction} will mean that the \\include tags in the main file referencing other chapters than 01_introduction.tex will be ignored and their content will not be compiled in the final output. 19.2.3 Chapter File The chapter file resembles a normal document, except for the fact that it has neither a preamble nor a \\begin{document} statement. Instead, it just begins with \\chapter{chaptertitle}. All the packages used in the chapters are defined globally in the book’s preamble. 19.2.4 Listings Reproducibility of results a key prerequisite of methodological transparency and one of the most important facets of quantitative research in social sciences. Every respectable scholar or analyst should allow his audience to go through his research cycle step-by-step, which involves providing them with the original data and the source-code used for the statistical analysis. Reading someone else’s code might often be a difficult task and providing some comments is likely to make it easier. The listings package allows you to include chunks of code in your documents, which makes it possible to prepare technical reports and appendices explaining your quantitative research. A Basic Example Like every other package, listings needs to be loaded in the preamble of the document. The first example shows the minimal structure of a document using listings. \\lstset{language=R} is used to determine which language will you use as the input (in this case we use R). Then, the lstlisting environment is used to include code in the text. Note, that in the output, a different text style is used for function names, such as function, sqrt, sum, comments and variables to make the code more readable.  19.2.5 Formatting Listings To make the code you include in your document more readable, you can add additional formatting to the lstlisting environment by setting different parameters through lstset. The example below shows some most important things that can be changed – you can check out the Listings package documentation for an exhaustive list. See Table \\(\\ref{tbl:listformat}\\) for a list of common parameters: 19.2.6 Using Source Files Copying and pasting your code might be effortful, especially if you make any changes to it after you put it in your document. Instead, you can use \\lstinputlisting[lines]{filename} tag, which allows you to input code directly from the source file you used in the analysis (for example an R script). Additionally, you can use the option brackets [] to specify the lines you want to insert. For example \\lstinputlisting[firstline = 2, lastline = 10]{script.R} will input lines 2 to 10 from file script.R (provided that the file is in the same location as the .tex file). 19.2.7 Inline code Finally, you can use your code in the middle of your regular text, by using , for example: This makes it easy to reference specific parts of your syntax. It can also be used with a source file, like \\lstinputlisting. 19.2.8 Natbib – advanced citations While citations and references were already covered in part 2 of the course, the natbib package extends BiBTeX’s capabilities and offers more flexibility in customizing bibliographies by including new bibliography styles and extending the \\cite command. The structure of the bibliography file (.bib) used by natbib remains the same as in BibTeX. Same as in BiBTeX, the bibliography style is set using the \\bibliographystyle command. Useful styles include agsm which sets Harvard-like references (the citation style officially used by the PAIS department), as well as plainnat and abbrvnat (which are similar, but the latter uses first name initials instead of full names). By default, some styles (such as apalike or agsm) use round parentheses, while others (like plainnant) use round brackets. This can be changed by loading the natbib with the round option (\\usepackage[round]{natbib}) which overrides the default style parentheses to be round or the square option, which does the opposite. Note that when changing the bibliography style in a file once rendered, you need to delete the .bbl auxiliary file which appears in the same folder as your rendered document. Natbib also implements multiple versions of the citation command. Rather than using \\cite as in BiBTeX, the simplest form of bibliography citation is \\citep. \\citet is a second alternative, which inserts the author’s surname without parentheses, followed by the publication year enclosed in parentheses. This allows you to cite a resource when using the author’s surname in the sentence, as demonstrated in the example. Both \\citep and \\citet have their alternative versions - \\citealp and \\citealt, which remove the parentheses entirely. The difference between \\citealp and \\citealt is that the latter separates the author’s name and publication year with a comma. This does not apply to the agsm bibliography style, which uses no comma between author’s surname and year – in this case, \\citealp and \\citealt are equivalent. Adding an asterisk * at the end of each natbib’s citation command overrides the default et al. abbreviation commonly used in citations of resources with multiple authors and uses the names of all authors instead (this is not supported in some styles, such as apalike). Using the square brackets allows you to add prefixes and suffixes in the citation. So, when using \\citep[option1][option2]{resource}, the option1 will be inserted before and option2 after the citation content (see example). Finally, using the \\citetext command you can join multiple natbib citations and add your comments in between them, as shown in the example. Table \\(\\ref{tbl:listnatbib}\\) summarizes the functionality of different citation commands in Natbib. Check out the .tex file used to produce the table – it uses the listings package to cite code inside of a document. 19.3 Tips &amp; Tricks This section covers some useful tips &amp; tricks and extensions of the previously discussed functionalities of . 19.3.1 Page Dimensions The package geometry provides an interface to change global parameters of the document and adjust various page dimensions. This can be done by either loading the package using \\usepackage{geometry} and then by using the command \\geometry{options} in the preamble of the document, or more concisely by specifying the options when loading the package, by \\usepackage[options]{geometry} – these are equivalent and can be used interchangeably, although the majority of users seem to prefer the latter since it’s shorter. The options are comma-separated parameters that you may want to adjust, such as the paper size (a4paper, a3paper, legalpaper, etc.), textwidth and textheight (which are self-explanatory) or margin (which sets all the margins to a certain length). These two are equivalent. The list of some basic parameters is shown in Table \\(\\ref{tbl:geometry}\\). Each of them can be set using different length units such as cm or in. The total size of the page is divided into the text body and margins, which have separate parameters – this is shown in Figure adopted from the geometry package documentation, which discusses the intricacies of different parameters at length. You can also change page dimensions mid-document, using the \\newgeometry{options} command in your document with the options listed above. Then, using \\restoregeometry will restore the parameters of all pages set after \\newpage or \\clearpage to those set in the preamble. This is demonstrated in the example. 19.3.2 Styling 19.3.2.1 Page number \\pagenumbering{style} – determines numbering style from the page it’s used on. Note that whenever you use this command, the page numbering starts from the beginning. Styles that can be used include arabic, alph (lowercase letters), Alph (uppercase), roman (lowercase roman numerals), Roman (uppercase roman numerals). 19.3.2.2 Header and footer style \\pagestyle{style} sets the automatic styling of the header and the footer from the page it’s used on. The footer and header’s behaviour is also determined by the documentclass of the document. The default value of style is plain, which puts a plain page number in the footer of each page. Other possibilities include: empty – nothing in either the header or the footer headings – running headings of the current section and page number A more useful alternative is offered by the fancyhdr package. It implements new pagestyle, fancy and allows you to control the left, right and central elements of the footer and header with simple commands in the document preamble. For example, \\rhead{text} sets the right footer and \\cfoot{text} sets the central footer. Their usage, along with some other useful styling tools, is shown in the example. 19.3.3 Shortcuts and Special Escapes 19.3.3.1 Shortcuts Texstudio also comes with multiple keyboard shortcuts which make preparing documents in slightly faster. Some of the most useful shortcuts are listed in Table \\(\\ref{tbl:texstudio}\\).  19.3.3.2 Special Escapes Some of the characters such as “$”, “%”, “#” or “_” have a special meaning in and by default are interpreted as elements of the syntax, rather than the text. You can override it by using the “escape” signs, which is the backslash “\\”. So, for example, if you want to compile “15%”, you need to typeset “15\\%” to escape the percentage character. To escape the backslash itself, use the tag \\textbackslash.  "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
